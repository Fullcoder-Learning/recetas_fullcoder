Fullstack Symfony Task Learn      
============================

.. image:: /logos/symfony-logo.png
    :scale: 30%
    :alt: Logo Symfony
    :align: center

.. |date| date::
.. |time| date:: %H:%M

Proyecto Lista de tareas con sistema de autenticación en Symfony 6.2.

- Repositorio proyecto completo: https://github.com/Fullcoder-Learning/symfony-task-learn

.. contents:: Índice
 

Fase 1: Sistema de Tareas 
#########################

En esta fase se va a crear la base del proyecto y todo el CRUD de tareas.

Paso 1: Instalaciones
*********************

En Windows
++++++++++

- En un terminal ejecutamos ``php --version`` para comprobar si esta instalado.
- Instalar composer: https://getcomposer.org/download/
- Instalar DBbowser: https://sqlitebrowser.org/
- Instalar WAMPP para usar mysql (elige la versión 8 durante la instalación): https://sourceforge.net/projects/wampserver/files/WampServer%203/WampServer%203.0.0/wampserver3.2.6_x64.exe/download
- Para abrir WAMP es probable que te haga falta el siguiente paquete en Windows: https://www.microsoft.com/es-es/download/details.aspx?id=30679
- En un tertminal ejecutamos ``componser --version`` para comprobar si esta instalado.
- Ahora instalamos doctrine para trabajar con modelos de datos:
    - ``composer require symfony/orm-pack``
    - ``composer require --dev symfony/maker-bundle``

Paso 2: Preparar proyecto 
*************************

- Crear el proyecto con composer ejecutando el comando: ``composer create-project symfony/website-skeleton task-learn-symfony``
- Crear un repositorio en github, gitlab o simil.
- Accedemos a la carpeta **task-learn-symfony**
- Inicializar repositorio: ``git init``
- Añadir repositorio remoto: ``git remote add origin https://github.com/Fullcoder-Learning/symfony-task-learn.git``
- Añadir cambios: ``git add .``
- Hacer primer commit: ``git commit -am "first commit"``
- Subir cambios a repositorio remoto: ``git push origin master``
- Crear rama desarrollo: ``git checkout -b developer``
- Subir rama desarrollo: ``git push origin developer``
- Crear rama feature a partir de developer: ``git checkout -b feature/phase-1-task-system``
- Desde la terminal acceder a la carpeta public y arrancar el servidor: ``php -S localhost:5000``

Paso 3: Conectar a la base de datos  
***********************************

- Lo primero será conectar la base de datos, editamos **.env**:

.. code-block:: 

    # In all environments, the following files are loaded if they exist,
    # the latter taking precedence over the former:
    #
    #  * .env                contains default values for the environment variables needed by the app
    #  * .env.local          uncommitted file with local overrides
    #  * .env.$APP_ENV       committed environment-specific defaults
    #  * .env.$APP_ENV.local uncommitted environment-specific overrides
    #
    # Real environment variables win over .env files.
    #
    # DO NOT DEFINE PRODUCTION SECRETS IN THIS FILE NOR IN ANY OTHER COMMITTED FILES.
    # https://symfony.com/doc/current/configuration/secrets.html
    #
    # Run "composer dump-env prod" to compile .env files for production use (requires symfony/flex >=1.2).
    # https://symfony.com/doc/current/best_practices.html#use-environment-variables-for-infrastructure-configuration

    ###> symfony/framework-bundle ###
    APP_ENV=dev
    APP_SECRET=ed9ab4f4909f4c19450d0ce0d7b82f76
    ###< symfony/framework-bundle ###

    ###> doctrine/doctrine-bundle ###
    # Format described at https://www.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#connecting-using-a-url
    # IMPORTANT: You MUST configure your server version, either here or in config/packages/doctrine.yaml
    # DATABASE_URL="sqlite:///%kernel.project_dir%/var/data.db"
    DESCOMENTAMOS LA VERSIÓN MYSQL y añadimos los datos de conexión y el nombre de la base de datos:
    DATABASE_URL="mysql://root:@127.0.0.1:3306/symfony_task_learn?serverVersion=8&charset=utf8mb4"
    # DATABASE_URL="postgresql://app:!ChangeMe!@127.0.0.1:5432/app?serverVersion=14&charset=utf8"
    ###< doctrine/doctrine-bundle ###

- Para crear la base de datos ejecutar en la raiz del proyecto: ``php bin/console doctrine:database:create``

.. attention::
    Si se utiliza un motor distinto al configurado, ej: MariaDB o MySQL 5.7 en lugar de la 8; puede provocar errores en los metadatos. 

Paso 4: Crear controlador para Tareas (TaskController)
******************************************************

- Desde consola en la raiz ejecutar comando: ``php bin/console make:controller TaskController``
- Esto ha creado un controlador que se encuntra en **src/Controller/** llamado **TaskController.php**:
- También ha creado una plantilla en **templates** llamada **
- Si vamos a la ruta http://localhost:5000/task veremos la pagina en funcionamiento.
- Vamos a quitar la ruta del controlador **TaskController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;

    class TaskController extends AbstractController
    {
        // borrar esta ruta local: #[Route('/task', name: 'app_task')]
        public function index(): Response
        {
            return $this->render('task/index.html.twig', [
                'controller_name' => 'TaskController',
            ]);
        }
    }

- Vamos a la carpeta **config** y añadimos una nueva ruta a **routes.yaml**:

.. code-block:: yaml

    # borramos y añadimos la ruta para listar tareas:
    index:
        path: /
        controller: App\Controller\TaskController::index

- Ahora podemos ver la nueva ruta directamente en http://localhost:5000


Paso 5: Preparar plantilla base
*******************************

- crear dentro de la carpeta **public** la carpeta **assets** y dentro la carpeta **images**
- Descargar el avatar genérico y guardar en **images**: https://raw.githubusercontent.com/Fullcoder-Learning/-task-learning-frontend/master/src/assets/avatar.png

- Vamos a editar la plantilla twig en la carpeta **templates** editamos **base.html.twig**:

.. code-block:: html 

    <!DOCTYPE html>
    <html>
        <head>
            <meta charset="UTF-8">
            <title>{% block title %}Task Learn{% endblock %}</title>
            <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text></svg>">
            <!-- Cargar css bootstrap -->
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
            <!-- Crear nueva hoja css para ajustar valores del nav -->
            <link rel="stylesheet" href="{{asset('assets/css/base.css')}}" />
            {# Run `composer require symfony/webpack-encore-bundle` to start using Symfony UX #}
            {% block stylesheets %}
                {{ encore_entry_link_tags('app') }}
            {% endblock %}

            {% block javascripts %}
                {{ encore_entry_script_tags('app') }}
            {% endblock %}
        </head>
        <body>
            <!-- crear navbar -->
            <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
                <div class="col-md-11 align-items-start ms-2" >
                    <a href="{{ path('index') }}" class="navbar-brand">Task Learn</a>
                </div>
                
                <ul class="navbar-nav mb-2 mb-lg-0 col-md-1 align-items-end me-3">
                    <li class="nav-item align-items-end">
                        <a href="/users" class="nav-link text-center">
                            <img class="avatar rounded img-thumbnail img-fluid" src="./assets/images/avatar.png" alt="foto" />
                            <div class="col">
                                <small>Usuario</small>
                            </div>
                        </a>
                    </li>
                </ul>
            </nav>

            {% block body %}{% endblock %}

            <!-- cargar scripts de boostrap -->
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>
        </body>
    </html>

- Añadimos el estilo para reducir la imagen, para ello creamos dentro de **assests** la carpeta **css** y dentro el archivo **base.css**:

.. code-block:: css 

    .avatar{
        height: 40px;
        width: 40px;
    }

Paso 6: Crear listado de tareas 
*******************************

- Vamos a crear una lista de tareas dummy en **taskController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;

    class TaskController extends AbstractController
    {
        public function index(): Response
        {
            // crear un objeto dummy para llenar la tabla:
            $dummyData = [
                ["_id" => "1", "name" => "Cocinar", "description" => "Cocinar galletas el sábado", "date_created" => "08/08/2022", "is_complete" => true, "date_finish" => "10/08/2022"],
                ["_id" => "2", "name" => "Preparar proyecto", "description" => "Preparar proyecto para presentar en Septiembre", "date_created" => "15/08/2022", "is_complete" => false],
                ["_id" => "3", "name" => "Estudiar Java", "description" => "Aprender Java para cubrir las especificaciones del proyecto", "date_created" => "19/08/2022", "is_complete" => false]
            ];

            return $this->render('task/index.html.twig', [
                'tasks' => $dummyData, // le pasamos a la vista la data
            ]);
        }
    }

- En la ruta **templates/task** editamos la plantilla **index.html.twig**:

.. code-block:: html 

    {% extends 'base.html.twig' %}

    {% block title %}Listado de tareas{% endblock %}

    {% block body %}

    <div class="text-center container">
        <table class="table mt-4">
            <thead>
                <tr>
                    <th scope="col">Título</th>
                    <th scope="col">Descripción</th>
                    <th scope="col">Fecha creación</th>
                    <th scope="col">Finalizada</th>
                    <th scope="col">Fecha Finalización</th>
                    <th scope="col">Operaciones</th>
                </tr>
            </thead>
            <tbody class="text-start">
                {% for task in tasks %}
                <tr>
                    <td>{{task.name}}</td>
                    <td>{{task.description}}</td>
                    <td>{{task.date_created}}</td>
                    <td>
                        {% if task.is_complete == true %}
                        si
                        {% else %}
                        no
                        {% endif %}
                    </td>
                    <td>
                        {% if task.date_finish is defined %}
                            {% if task.date_finish is not null %}
                                {{task.date_finish}}
                            {% endif %}
                        {% endif %}
                    </td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-primary me-2">finalizar tarea</button>
                        <button class="btn btn-sm btn-danger me-2">Eliminar tarea</button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    {% endblock %}


Paso 7: Crear modelo de datos (Task)
************************************

- Crear una nueva entidad: ``php bin/console make:entity Task``
- Desde la consola podemos ir añadiendo los siguientes campos:
    - name, string, 100, no.
    - description, string, 255, yes.
    - is_complete, boolean, yes.
    - date_created, datetime, no.
    - date_finish, datetime, yes.
    - Presionar Intro para terminar.

- en src/Entity podemos ver el archivo con las entidades de task llamado **Task.php**. 
- Revisar las diferencias con la base de datos actual: ``php bin/console doctrine:migrations:diff``
- Ejecutar migración: ``php bin/console doctrine:migrations:migrate`` confirmamos la operación (los datos existentes se perderán).

Paso 8: Listar tareas  
*********************

- Abrimos la base de datos que se encuentra en **var/data.db** con DBbowser y añadimos una tarea nueva.

- Editamos **TaskController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    // cargamos el entitymanagerinterface:
    use Doctrine\ORM\EntityManagerInterface;
    // cargar la entidad de tareas:
    use App\Entity\Task;

    class TaskController extends AbstractController
    {   
        // importar en el método la entidad de tareas el entitymanagerinterface:
        public function index(EntityManagerInterface $doctrine): Response
        {
            // recuperar tareas:
            $tasks = $doctrine->getRepository(Task::class)->findAll();

            
            // se borra la dummyData 

            return $this->render('task/index.html.twig', [
                'tasks' => $tasks,
            ]);
        }
    }

- Editamos la plantilla para ajustar listado **index.html.twig**:

.. code-block:: html 

    {% extends 'base.html.twig' %}

    {% block title %}Listado de tareas{% endblock %}

    {% block body %}
    <!-- podemos ver la estructura de la información: -->
    {{dump(tasks)}}

    <div class="text-center container">
        <table class="table mt-4">
            <thead>
                <tr>
                    <th scope="col">Título</th>
                    <th scope="col">Descripción</th>
                    <th scope="col">Fecha creación</th>
                    <th scope="col">Finalizada</th>
                    <th scope="col">Fecha Finalización</th>
                    <th scope="col">Operaciones</th>
                </tr>
            </thead>
            <tbody class="text-start">
                {% for task in tasks %}
                <tr>
                    <td>{{task.name}}</td>
                    <td>{{task.description}}</td>
                    <td>{{task.dateCreated|date("d/m/Y H:m:s")}}</td>
                    <td>
                        {% if task.isComplete == true %}
                        si
                        {% else %}
                        no
                        {% endif %}
                    </td>
                    <td>
                        {% if task.dateFinish is defined %}
                            {% if task.dateFinish is not null %}
                                {{task.dateFinish|date("d/m/Y H:m:s")}}
                            {% endif %}
                        {% endif %}
                    </td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-primary me-2">finalizar tarea</button>
                        <button class="btn btn-sm btn-danger me-2">Eliminar tarea</button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    {% endblock %}


Paso 9: Crear tareas
********************

- Crear un nuevo formulario con: ``php bin/console make:form``
    - elegimos la clase del formulario: Task.
    - elegimos la entidad: Task.

- Editamos el formulario **TaskType.php**:

.. code-block:: php 

    <?php

    namespace App\Form;

    use App\Entity\Task;
    use Symfony\Component\Form\AbstractType;
    use Symfony\Component\Form\FormBuilderInterface;
    use Symfony\Component\OptionsResolver\OptionsResolver;
    // cargamos el input submit:
    use Symfony\Component\Form\Extension\Core\Type\SubmitType;

    class TaskType extends AbstractType
    {
        public function buildForm(FormBuilderInterface $builder, array $options): void
        {   // quitamos los campos que no vamos a usar del formulario:
            $builder
                ->add('name')
                ->add('description')
            ;
        }

        public function configureOptions(OptionsResolver $resolver): void
        {
            $resolver->setDefaults([
                'data_class' => Task::class,
            ]);
        }
    }

    
- Editamos el método index del controlador **TaskController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    use Doctrine\ORM\EntityManagerInterface;
    use App\Entity\Task;
    // importamos el request (el de symfony no el de App):
    use Symfony\Component\HttpFoundation\Request;
    // cargamos el formulario de tareas:
    use App\Form\TaskType;

    class TaskController extends AbstractController
    {   // para poder redireccionar definimos el nombre de la ruta:
        #[Route('/', name: 'index')]
        public function index(Request $request, EntityManagerInterface $doctrine): Response
        {
            $tasks = $doctrine->getRepository(Task::class)->findAll();

            // creamos un atributo con la entidad tarea:
            $task = new Task();
            // creamos un formulario con la entidad tarea:
            $form = $this->createForm(TaskType::class, $task);
            // recuperar los datos del post en el formulario:
            $form->handleRequest($request);
            if($form->isSubmitted() && $form->isValid()){
                // cargar en la tarea la fecha actual y definir como incompleta:
                $task->setDateCreated(new \DateTime())
                    ->setIsComplete(false);
                // cargamos los datos en el modelo:
                $doctrine->persist($task);
                $doctrine->flush(); // con flush se guardan en la base de datos
                // si todo ha ido bien redireccionamos usando el nombre de la ruta local:
                return $this->redirectToRoute('index');
            }

            return $this->render('task/index.html.twig', [
                'tasks' => $tasks,
                'taskForm' => $form->createView()
            ]);
        }

    }


- Luego añadimos un pequeño formulario para guardar la tarea en **index.html.twig**:

.. code-block:: html 

    {% extends 'base.html.twig' %}

    {% block title %}Listado de tareas{% endblock %}

    {% block body %}

    <div class="text-center container">
        <table class="table mt-4">
            <thead>
                <tr>
                    <th scope="col">Título</th>
                    <th scope="col">Descripción</th>
                    <th scope="col">Fecha creación</th>
                    <th scope="col">Finalizada</th>
                    <th scope="col">Fecha Finalización</th>
                    <th scope="col">Operaciones</th>
                </tr>
            </thead>
            <tbody class="text-start">
                {% for task in tasks %}
                <tr>
                    <td>{{task.name}}</td>
                    <td>{{task.description}}</td>
                    <td>{{task.dateCreated|date("d/m/Y H:m:s")}}</td>
                    <td>
                        {% if task.isComplete == true %}
                        si
                        {% else %}
                        no
                        {% endif %}
                    </td>
                    <td>
                        {% if task.dateFinish is defined %}
                            {% if task.dateFinish is not null %}
                                {{task.dateFinish|date("d/m/Y H:m:s")}}
                            {% endif %}
                        {% endif %}
                    </td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-primary me-2">finalizar tarea</button>
                        <button class="btn btn-sm btn-danger me-2">Eliminar tarea</button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        <!-- cargamos de forma manual el formulario para crear tarea tal y como se muestra -->
        <div class="row text-center align-items-end">
            <form action="{{path('index')}}" method="post" role="form" class="row">
                <div class="col-md-5"></div>
                {{ form_row(taskForm._token) }}

                {{ form_label(taskForm.name, 'name', {'label_attr': {'style': 'display:none'}}) }}
                {{ form_widget(taskForm.name, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder':'Título'}}) }}
                {{ form_errors(taskForm.name) }}

                {{ form_label(taskForm.description, 'description', {'label_attr': {'style': 'display:none'}}) }}
                {{ form_widget(taskForm.description, {'attr':{'class': 'col me-2 form-control', 'placeholder':'Descripción'}}) }}
                {{ form_errors(taskForm.description, {'attr': {'class': 'col-md-3'}}) }}

                <input class="col me-2 form-control btn btn-success" type="submit" value="Crear tarea" />
            </form>
            </div>
        </div>
    </div>

    {% endblock %}

Paso 10: Finalizar y eliminar Tarea 
***********************************

- Vamos a crear un nuevo método en el controlador **TaskController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    use Doctrine\ORM\EntityManagerInterface;
    use App\Entity\Task;
    use Symfony\Component\HttpFoundation\Request;
    use App\Form\TaskType;

    class TaskController extends AbstractController
    {   
        public function index(Request $request, EntityManagerInterface $doctrine): Response
        {
            $tasks = $doctrine->getRepository(Task::class)->findAll();

            $task = new Task();
            $form = $this->createForm(TaskType::class, $task);
            $form->handleRequest($request);

            if($form->isSubmitted() && $form->isValid()){
                $task->setDateCreated(new \DateTime())
                    ->setIsComplete(false);
                $doctrine->persist($task);
                $doctrine->flush();
                return $this->redirectToRoute('index');
            }

            return $this->render('task/index.html.twig', [
                'tasks' => $tasks,
                'taskForm' => $form->createView()
            ]);
        }

        // la función recibe el id y doctrine:
        public function finish($id, EntityManagerInterface $doctrine): Response
        {
            // recuperamos la tarea con el id recibido:
            $task = $doctrine->getRepository(Task::class)->findOneBy(['id' => $id]);
            // la establecemos como finalizada y añadimos su fecha de fin:
            $task->setIsComplete(true)
                ->setDateFinish(new \DateTime());
        
            // cargamos los datos en el modelo:
            $doctrine->persist($task);
            $doctrine->flush(); // con flush se guardan en la base de datos
            // regresamos al índice de tareas:
            return $this->redirectToRoute('index');
        }

        // la función recibe el id y doctrine:
        public function delete($id, EntityManagerInterface $doctrine): Response
        {
            // recuperamos la tarea con el id recibido:
            $task = $doctrine->getRepository(Task::class)->findOneBy(['id' => $id]);
            // ejecutamos la acción de borrar la tarea:
            $doctrine->remove($task);
            $doctrine->flush(); // con flush se guardan en la base de datos
            // regresamos al índice de tareas:
            return $this->redirectToRoute('index');
        }

    }

- En la ruta **public/assets** creamos una nueva carpeta llamada **js** y dentro de esta un archivo llamado **base.js**.
- Añadimos el archivo **base.js** a **base.html.twig**:

.. code-block:: html 

    <!DOCTYPE html>
    <html>
        <head>
            <meta charset="UTF-8">
            <title>{% block title %}Task Learn{% endblock %}</title>
            <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text></svg>">
            <!-- Cargar css bootstrap -->
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
            <link rel="stylesheet" href="{{asset('assets/css/base.css')}}" />
            {# Run `composer require symfony/webpack-encore-bundle` to start using Symfony UX #}
            {% block stylesheets %}
                {{ encore_entry_link_tags('app') }}
            {% endblock %}

            {% block javascripts %}
                {{ encore_entry_script_tags('app') }}
            {% endblock %}
        </head>
        <body>
            <!-- crear navbar -->
            <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
                <div class="col-md-11 align-items-start ms-2" >
                    <a href="{{ path('index') }}" class="navbar-brand">Task Learn</a>
                </div>
                
                <ul class="navbar-nav mb-2 mb-lg-0 col-md-1 align-items-end me-3">
                    <li class="nav-item align-items-end">
                        <a href="/users" class="nav-link text-center">
                            <img class="avatar rounded img-thumbnail img-fluid" src="./assets/images/avatar.png" alt="foto" />
                            <div class="col">
                                <small>Usuario</small>
                            </div>
                        </a>
                    </li>
                </ul>
            </nav>

            {% block body %}{% endblock %}

            <!-- cargar scripts de boostrap -->
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>
            <script src="{{asset('assets/js/base.js')}}"></script>
        </body>
    </html>

- Ahora editamos la plantilla **index.html.twig**:

.. code-block:: html 

    {% extends 'base.html.twig' %}

    {% block title %}Listado de tareas{% endblock %}

    {% block body %}

    <div class="text-center container">
        <table class="table mt-4">
            <thead>
                <tr>
                    <th scope="col">Título</th>
                    <th scope="col">Descripción</th>
                    <th scope="col">Fecha creación</th>
                    <th scope="col">Finalizada</th>
                    <th scope="col">Fecha Finalización</th>
                    <th scope="col">Operaciones</th>
                </tr>
            </thead>
            <tbody class="text-start">
                {% for task in tasks %}
                <tr>
                    <td>{{task.name}}</td>
                    <td>{{task.description}}</td>
                    <td>{{task.dateCreated|date("d/m/Y H:m:s")}}</td>
                    <td>
                        {% if task.isComplete == true %}
                        si
                        {% else %}
                        no
                        {% endif %}
                    </td>
                    <td>
                        {% if task.dateFinish is defined %}
                            {% if task.dateFinish is not null %}
                                {{task.dateFinish|date("d/m/Y H:m:s")}}
                            {% endif %}
                        {% endif %}
                    </td>
                    <td class="text-center">
                        <!-- vinculamos el modal al botón eliminar tarea y añadimos una función al evento click para recuperar id y name (el name al ser string hay que ponerlo entre comillas) -->
                        <button class="btn btn-sm btn-primary me-2" data-bs-toggle="modal" data-bs-target="#taskModal" onclick="getTask({{task.id}}, '{{task.name}}', 'finish')">finalizar tarea</button>
                        <!-- vinculamos el modal al botón eliminar tarea y añadimos una función al evento click para recuperar id y name (el name al ser string hay que ponerlo entre comillas) -->
                        <button class="btn btn-sm btn-danger me-2" data-bs-toggle="modal" data-bs-target="#taskModal" onclick="getTask({{task.id}}, '{{task.name}}', 'delete')">Eliminar tarea</button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        <div class="row text-center align-items-end">
            <form action="{{path('index')}}" method="post" role="form" class="row">
                <div class="col-md-5"></div>
                {{ form_row(taskForm._token) }}

                {{ form_label(taskForm.name, 'name', {'label_attr': {'style': 'display:none'}}) }}
                {{ form_widget(taskForm.name, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder':'Título'}}) }}
                {{ form_errors(taskForm.name) }}

                {{ form_label(taskForm.description, 'description', {'label_attr': {'style': 'display:none'}}) }}
                {{ form_widget(taskForm.description, {'attr':{'class': 'col me-2 form-control', 'placeholder':'Descripción'}}) }}
                {{ form_errors(taskForm.description, {'attr': {'class': 'col-md-3'}}) }}

                <input class="col me-2 form-control btn btn-success" type="submit" value="Crear tarea" />
            </form>
            </div>
        </div>
    </div>

    <div class="modal fade" id="taskModal" tabIndex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskModalTitle"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- creamos un id para pasar id y nombre -->
                <p id="taskDefinition">id - tarea</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <!-- creamos un identificador para asignar la ruta por javascript: -->
                <a id="taskButton" href="" class="">Aceptar</a>
            </div>
            </div>
        </div>
    </div>

    {% endblock %}


- Ahora pasamos al archivo javascript **base.js**:

.. code-block:: javascript 

    // añadimos la función para eliminar tarea:
    function getTask(id, name, action){
        // cargar etiquetas:
        let taskModalTitle = document.getElementById('taskModalTitle');
        let taskButton = document.getElementById('taskButton');
        let taskDefinition = document.getElementById('taskDefinition');
        
        // comprobar la acción recibida y asignar datos a las etiquetas:
        switch(action){
            case 'finish':
                taskModalTitle.textContent = 'Se va a finalizar la siguiente tarea';
                taskDefinition.textContent = id + " - " + name;
                taskButton.href = '/tasks/finish/' + id;
                taskButton.className  = 'btn btn-primary';
                break;
            case 'delete':
                taskModalTitle.textContent = 'Se va a eliminar la siguiente tarea';
                taskDefinition.textContent = id + " - " + name;
                taskButton.href = '/tasks/delete/' + id;
                taskButton.className  = 'btn btn-danger';
                break;
        }
    }


- Por último creamos la ruta general al método en **routes.yaml**:

.. code-block:: yaml

    index:
    path: /
    controller: App\Controller\TaskController::index

    finish:
        path: /tasks/finish/{id}
        controller: App\Controller\TaskController::finish

    # Añadimos la ruta para eliminar tareas:
    delete:
        path: /tasks/delete/{id}
        controller: App\Controller\TaskController::delete



Paso 11: Editar tareas
**********************

- Creamos un nuevo metodo en **TaskController.php**:

.. code-block:: php

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    use Doctrine\ORM\EntityManagerInterface;
    use App\Entity\Task;
    use Symfony\Component\HttpFoundation\Request;
    use App\Form\TaskType;

    class TaskController extends AbstractController
    {   
        public function index(Request $request, EntityManagerInterface $doctrine): Response
        {
            $tasks = $doctrine->getRepository(Task::class)->findAll();

            $task = new Task();
            $form = $this->createForm(TaskType::class, $task);
            $form->handleRequest($request);

            if($form->isSubmitted() && $form->isValid()){
                $task->setDateCreated(new \DateTime())
                    ->setIsComplete(false);
                $doctrine->persist($task);
                $doctrine->flush();
                return $this->redirectToRoute('index');
            }

            return $this->render('task/index.html.twig', [
                'tasks' => $tasks,
                'taskForm' => $form->createView(),
                'taskEditForm' => $form->createView() // recargamos otro formulario para evitar fallos 
            ]);
        }

        public function finish($id, EntityManagerInterface $doctrine): Response
        {
            $task = $doctrine->getRepository(Task::class)->findOneBy(['id' => $id]);
            $task->setIsComplete(true)
                ->setDateFinish(new \DateTime());
        
            // cargamos los datos en el modelo:
            $doctrine->persist($task);
            $doctrine->flush(); 
            return $this->redirectToRoute('index');
        }

        public function delete($id, EntityManagerInterface $doctrine): Response
        {
            $task = $doctrine->getRepository(Task::class)->findOneBy(['id' => $id]);
            $doctrine->remove($task);
            $doctrine->flush(); 
            return $this->redirectToRoute('index');
        }

        // creamos un nuevo método para editar tareas:
        public function update($id, EntityManagerInterface $doctrine, Request $request): Response
        {
            // recuperar tarea:
            $task = $doctrine->getRepository(Task::class)->findOneBy(['id' => $id]);
            dump($request->query->get('name'));
            // crear formulario y pasarle la request:
            $form = $this->createForm(TaskType::class, $task);
            $form->handleRequest($request);
            // ahora no lo persistimos solo lo escribimos:
            if($form->isSubmitted() && $form->isValid()){
                $doctrine->flush();
            }

            // redireccionar:
            return $this->redirectToRoute('index');
            
        }

    }


- Modificamos la vista para añadir un nuevo formulario de edición en **index.html.twig**:

.. code-block::  

    {% extends 'base.html.twig' %}

    {% block title %}Listado de tareas{% endblock %}

    {% block body %}

    <div class="text-center container">
        <table class="table mt-4">
            <thead>
                <tr>
                    <th scope="col">Título</th>
                    <th scope="col">Descripción</th>
                    <th scope="col">Fecha creación</th>
                    <th scope="col">Finalizada</th>
                    <th scope="col">Fecha Finalización</th>
                    <th scope="col">Operaciones</th>
                </tr>
            </thead>
            <tbody id="taskList" class="text-start">
                {% for task in tasks %}
                <tr>
                    <td>{{task.name}}</td>
                    <td>{{task.description}}</td>
                    <td>{{task.dateCreated|date("d/m/Y H:m:s")}}</td>
                    <td>
                        {% if task.isComplete == true %}
                        si
                        {% else %}
                        no
                        {% endif %}
                    </td>
                    <td>
                        {% if task.dateFinish is defined %}
                            {% if task.dateFinish is not null %}
                                {{task.dateFinish|date("d/m/Y H:m:s")}}
                            {% endif %}
                        {% endif %}
                    </td>
                    <td class="text-center">
                        <!-- añadimos el botón para editar tarea y le pasamos los valores: -->                            
                        <button class="btn btn-sm btn-warning me-2" onclick="editTask({{task.id}}, '{{task.name}}', '{{task.description}}', '{{task.dateCreated|date("d/m/Y H:m:s")}}', '{{task.isComplete}}', '{{task.dateFinish|date("d/m/Y H:m:s")}}')">editar tarea</button>
                        <button class="btn btn-sm btn-primary me-2" data-bs-toggle="modal" data-bs-target="#taskModal" onclick="getTask({{task.id}}, '{{task.name}}', 'finish')">finalizar tarea</button>
                        <button class="btn btn-sm btn-danger me-2" data-bs-toggle="modal" data-bs-target="#taskModal" onclick="getTask({{task.id}}, '{{task.name}}', 'delete')">Eliminar tarea</button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
            <tbody id="taskEdit" class="d-none">
                <form id="taskForm" action="" method="post" role="form" class="row">
                    {{ form_row(taskEditForm._token) }}
                    <tr>
                        <td>
                            {{ form_label(taskEditForm.name, 'name', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(taskEditForm.name, {'attr': {'class': 'col me-2 form-control form-sm'}}) }}
                            {{ form_errors(taskEditForm.name) }}
                        </td>
                        <td>
                            {{ form_label(taskEditForm.description, 'description', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(taskEditForm.description, {'attr':{'class': 'col me-2 form-control'}}) }}
                            {{ form_errors(taskEditForm.description, {'attr': {'class': 'col-md-3'}}) }}
                        </td>
                        <td id="taskDateCreated"></td>
                        <td id="taskComplete"></td>
                        <td id="taskDateFinish"></td>
                        <td class="text-center">
                            <button type="submit" class="btn btn-sm btn-success me-2 mb-1">Guardar</button>
                            <button type="button" class="btn btn-sm btn-primary me-2 mb-1" onclick="cancelEdit()">Cancelar</button>
                        </td>
                    </tr>
                </form>
            </tbody>
        </table>
        <div id="taskCreate" class="row text-center align-items-end">
            <form action="{{path('index')}}" method="post" role="form" class="row">
                <div class="col-md-5"></div>
                {{ form_row(taskForm._token) }}

                {{ form_label(taskForm.name, 'name', {'label_attr': {'style': 'display:none'}}) }}
                {{ form_widget(taskForm.name, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder':'Título'}}) }}
                {{ form_errors(taskForm.name) }}

                {{ form_label(taskForm.description, 'description', {'label_attr': {'style': 'display:none'}}) }}
                {{ form_widget(taskForm.description, {'attr':{'class': 'col me-2 form-control', 'placeholder':'Descripción'}}) }}
                {{ form_errors(taskForm.description, {'attr': {'class': 'col-md-3'}}) }}

                <input class="col me-2 form-control btn btn-success" type="submit" value="Crear tarea" />
            </form>
            </div>
        </div>
    </div>

    <div class="modal fade" id="taskModal" tabIndex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskModalTitle"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- creamos un id para pasar id y nombre -->
                <p id="taskDefinition">id - tarea</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <!-- creamos un identificador para asignar la ruta por javascript: -->
                <a id="taskButton" href="" class="">Aceptar</a>
            </div>
            </div>
        </div>
    </div>

    {% endblock %}


- Creamos dos nuevas funciones en javascript para manejar cambios de pantalla en **base.js**:

.. code-block:: javascript 

    function getTask(id, name, action){
        let taskModalTitle = document.getElementById('taskModalTitle');
        let taskButton = document.getElementById('taskButton');
        let taskDefinition = document.getElementById('taskDefinition');
        
        switch(action){
            case 'finish':
                taskModalTitle.textContent = 'Se va a finalizar la siguiente tarea';
                taskDefinition.textContent = id + " - " + name;
                taskButton.href = '/tasks/finish/' + id;
                taskButton.className  = 'btn btn-primary';
                break;
            case 'delete':
                taskModalTitle.textContent = 'Se va a eliminar la siguiente tarea';
                taskDefinition.textContent = id + " - " + name;
                taskButton.href = '/tasks/delete/' + id;
                taskButton.className  = 'btn btn-danger';
                break;
        }
    }

    // función para cargar datos en campos:
    function editTask(id, name, description, dateCreated, isComplete, dateFinish){
        // recuperar nodos padres:
        let taskList = document.getElementById('taskList');
        let taskEdit = document.getElementById('taskEdit');
        let taskCreate = document.getElementById('taskCreate');

        // recuperar etiquetas a editar y añadir información:
        document.getElementById('taskForm').action = '/tasks/update/' + id;
        document.getElementById('task_name').value = name;
        document.getElementById('task_description').value = description;
        document.getElementById('taskDateCreated').textContent = dateCreated;
        document.getElementById('taskComplete').textContent = isComplete == true ? "Si" : "No"; 
        document.getElementById('taskDateFinish').textContent = isComplete == true ? dateFinish : "";

        // cambiar clases de boostrap para ocultar listado de tareas y mostrar editor:
        taskList.className = "d-none";
        taskEdit.className = "";
        taskCreate.className = "d-none";
    }

    // cancelar edición:
    function cancelEdit(){
        let taskList = document.getElementById('taskList');
        let taskEdit = document.getElementById('taskEdit');
        let taskCreate = document.getElementById('taskCreate');

        // cambiar clases de boostrap para mostrar listado de tareas y ocultar editor:
        taskList.className = "text-start";
        taskEdit.className = "d-none";
        taskCreate.className = "row text-center align-items-end";
    }

- Finalmente cargamos la ruta en **routes.yaml**:

.. code-block:: yaml

    index:
    path: /
    controller: App\Controller\TaskController::index

    finish:
        path: /tasks/finish/{id}
        controller: App\Controller\TaskController::finish

    delete:
        path: /tasks/delete/{id}
        controller: App\Controller\TaskController::delete

    # Añadimos la ruta para actualizar tareas:
    update:
        path: /tasks/update/{id}
        controller: App\Controller\TaskController::update

Paso 12: Subir cambios a GitHub  
*******************************

- Parar ejecución de app.
- Añadir cambios: ``git add .``
- Realizar un commit: ``git commit -am "Phase 1 complete"``
- Subir cambios a Github con el nombre de la rama actual: ``git push origin feature/phase-1-task-system``
- Desde gitHub presionar botón **Compare & pull request**.
- cambiar rama base **master** por **developer** y pulsar **Create pull request**
- Pulsar en **Merge pull request** y a continuación en **Confirm merge**.
- Una vez terminado volvemos a local y cambiamos de rama a developer: ``git checkout developer``
- Actualizamos rama developer: ``git pull origin developer`` 

Y con esto concluye la primera fase del proyecto.

.. raw:: html 

    <hr><br>

Fase 2: Autenticación y perfil     
##############################

En esta fase se va a crear el sistema de usuarios, autenticación y la relación entre tareas y usuarios.

Paso 1: Preparar proyecto 
*************************

- Crear rama nueva ``git checkout -b feature/phase-2-user-authentication``
- Instalar librería **symfony/mailer**: ``composer require symfony/mailer``

Paso 2: Crear modelo de usuarios
********************************

- Ejecutar el comando: ``php bin/console make:user``
    - User
    - yes 
    - email
    - yes

- Para agregar el resto de campo vamos a ejecutar el comando ``php bin/console make:entity``
    - name, string, 150, yes 
    - lastname, string, 200, yes 
    - avatar, string, 200, yes
    - Presionar Intro para terminar.

- Revisar las diferencias con la base de datos actual: ``php bin/console doctrine:migrations:diff``
- Ejecutar migración: ``php bin/console doctrine:migrations:migrate`` confirmamos la operación (los datos existentes se perderán).

Paso 3: Establecer relación entre usuarios y tareas 
***************************************************

- Para que cada tarea pertenezca a un usuario editamos la entidad añadiendo una llave foranea.
- Ejecutamos el comando ``php bin/console make:entity``
    - Task
    - owner
    - ManyToOne
    - User 
    - no
    - yes
    - tasks 
    - yes (es necesario borrar los datos de la base de datos que no tienen relación para evitar inconcurrencias).
    - Presionar Intro para terminar.

- Revisar las diferencias con la base de datos actual: ``php bin/console doctrine:migrations:diff``
- Ejecutar migración: ``php bin/console doctrine:migrations:migrate`` confirmamos la operación (los datos existentes se perderán).

.. attention 
    Una vez creada dicha relación las tareas se habrán borrado y no podremos crear nuevas tareas hasta crear todo el sistema de autenticación de usuarios que son los siguientes pasos.

Paso 4: Crear registro de usuarios
**********************************

- Lo primero que hay que hacer es crear un nuevo controlador: ``php bin/console make:controller UserController``
- Creamos un formulario: ``php bin/console make:form User``
    - elegimos la clase del formulario: User.
    - elegimos la entidad: User.

- Editamos el formulario **UserType.php**:

.. code-block:: php 

    <?php

    <?php

    namespace App\Form;

    use App\Entity\User;
    use Symfony\Component\Form\AbstractType;
    use Symfony\Component\Form\FormBuilderInterface;
    use Symfony\Component\OptionsResolver\OptionsResolver;
    // añadimos el passwordType y el emailtype: 
    use Symfony\Component\Form\Extension\Core\Type\PasswordType;
    use Symfony\Component\Form\Extension\Core\Type\EmailType;


    class UserType extends AbstractType
    {
        public function buildForm(FormBuilderInterface $builder, array $options): void
        {
            $builder
                ->add('email', EmailType::class, array(
                    'required' => true, // que sea requerido 
                ))
                // Eliminamos los roles ya que nos los vamos a usar: ->add('roles')
                ->add('password', PasswordType::class, array(
                    'required' => true, // que sea requerido
                    'always_empty' => true // irá siempre vacio (esto servirá para editar usuario)
                ))
                ->add('name')
                ->add('lastname')
                ->add('avatar')
            ;
        }

        public function configureOptions(OptionsResolver $resolver): void
        {
            $resolver->setDefaults([
                'data_class' => User::class,
            ]);
        }
    }


- Editamos **UserController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    // cargamos el request de httpfoundation:
    use Symfony\Component\HttpFoundation\Request;
    // cargamos el entitymanagerinterface:
    use Doctrine\ORM\EntityManagerInterface;
    // cargamos el cifrado de contarseñas:
    use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

    // cargamos la entidad user:
    use App\Entity\User;
    // cargamos el formulario de user:
    use App\Form\UserType;

    class UserController extends AbstractController
    {
        // eliminamos la ruta local y cambiamos el nombre del index por login:
        public function login(): Response 
        {   
            // creamos un objeto de la entidad user:
            $user = new User();
            // creamos el formulario de registro y le asignamos la entidad user:
            $registrationForm = $this->createForm(UserType::class, $user); 
            
            // del mismo modo cambiamos el nombre del template por login.html.twig (el archivo también)
            return $this->render('user/login.html.twig', [
                'registration_form' => $registrationForm->createView()
            ]);
        }
        
        // creamos una ruta para registrar usuarios:
        public function register(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher): Response // cargamos el request, el entityManagerInterface y el codificador de contraseñas
        {   
            // creamos un objeto de la entidad user:
            $user = new User();
            // creamos el formulario de registro y le asignamos la entidad user:
            $registrationForm = $this->createForm(UserType::class, $user); 

            // recuperamos la petición de request en el formulario:
            $registrationForm->handleRequest($request);
            // comprobamos que llega un request y todo es válido:
            if($registrationForm->isSubmitted()){
                if($registrationForm->isValid()){
                    // definimos el rol a mano por seguridad:
                    $user->setRoles(['ROLE_USER']);
                    // recuperamos la contraseña del campo form para cifrar:
                    $plainPassword = $registrationForm->get('password')->getData();
                    // antes de guardar ciframos la contraseña:
                    $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                    // añadimos la nueva contraseña cifrada:
                    $user->setPassword($hashedPassword);

                    $doctrine->persist($user);
                    $doctrine->flush();
                    return $this->redirectToRoute('login');
                }
            }
        }
    }


- Añadimos la ruta a **routes.yaml**:

.. code-block:: yaml

    index:
        path: /
        controller: App\Controller\TaskController::index

    finish:
        path: /tasks/finish/{id}
        controller: App\Controller\TaskController::finish

    delete:
        path: /tasks/delete/{id}
        controller: App\Controller\TaskController::delete

    update:
        path: /tasks/update/{id}
        controller: App\Controller\TaskController::update

    # Añadimos la ruta para iniciar sesión y registro:
    login: 
        path: /login
        controller: App\Controller\UserController::login

    register: 
        path: /register
        controller: App\Controller\UserController::register


- Ahora vamos a ocultar el navbar con una condición de ruta en **base.html.twig**:

.. code-block:: html 

    <!DOCTYPE html>
    <html>
        <head>
            <meta charset="UTF-8">
            <title>{% block title %}Task Learn{% endblock %}</title>
            <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text></svg>">
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
            <link rel="stylesheet" href="{{asset('assets/css/base.css')}}" />
            {# Run `composer require symfony/webpack-encore-bundle` to start using Symfony UX #}
            {% block stylesheets %}
                {{ encore_entry_link_tags('app') }}
            {% endblock %}

            {% block javascripts %}
                {{ encore_entry_script_tags('app') }}
            {% endblock %}
        </head>
        <body>
            <!-- Ocultar navbar cuando la ruta sea login o register: -->
            {% if app.request.get('_route') not in ['login','reset_password'] %}
                <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
                    <div class="col-md-11 align-items-start ms-2" >
                        <a href="{{ path('index') }}" class="navbar-brand">Task Learn</a>
                    </div>
                    
                    <ul class="navbar-nav mb-2 mb-lg-0 col-md-1 align-items-end me-3">
                        <li class="nav-item align-items-end">
                            <a href="/users" class="nav-link text-center">
                                <img class="avatar rounded img-thumbnail img-fluid" src="./assets/images/avatar.png" alt="foto" />
                                <div class="col">
                                    <small>Usuario</small>
                                </div>
                            </a>
                        </li>
                    </ul>
                </nav>
            {% endif %}

            {% block body %}{% endblock %}

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>
            <script src="{{asset('assets/js/base.js')}}"></script>
        </body>
    </html>

- Editamos la pantalla de login para añadir el formulario de registro **login.html.twig**:

.. code-block:: html 

    {% extends 'base.html.twig' %}

    {% block title %}Iniciar Sesión{% endblock %}

    {% block body %}
    <style>
        .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
        .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
    </style>

    <!-- cargar formulario de registro, luego arreglamos el login y el registro lo añadimos a un modal -->
    <div class="row">
        <div class="col">
            <form id="userForm" action="{{path('register')}}" method="post" role="form" class="row">
                {{ form_row(registration_form._token) }}

                {{ form_label(registration_form.email, 'email', {'label_attr': {'style': 'display:none'}}) }}
                {{ form_widget(registration_form.email, {'attr': {'class': 'form-control mt-3', 'placeholder':'Email'}}) }}
                {{ form_errors(registration_form.email) }}
                
                {{ form_label(registration_form.password, 'password', {'label_attr': {'style': 'display:none'}}) }}
                {{ form_widget(registration_form.password, {'attr':{'class': 'form-control mt-3', 'placeholder': 'Contraseña', 'type':'password'}}) }}
                {{ form_errors(registration_form.password, {'attr': {'class': 'col-md-3'}}) }}
                
                <input type="submit" class="btn btn-success form-control mt-3" value="Darse de alta" />
            </form>
        </div>
    </div>

    {% endblock %}


Paso 5: Crear Login e iniciar sesión 
************************************

- En la carpeta **config/packages** editamos **security.yaml**:

.. code-block:: yaml

    security:
        # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
        providers:
            # used to reload user from session & other features (e.g. switch_user)
            app_user_provider:
                entity:
                    class: App\Entity\User
                    property: email
        firewalls:
            dev:
                pattern: ^/(_(profiler|wdt)|css|images|js)/
                security: false
            main:
                lazy: true
                provider: app_user_provider
                form_login: # Añadimos esta línea para autorizar el login en symfony
                    login_path: login
                    check_path: login

                # activate different ways to authenticate
                # https://symfony.com/doc/current/security.html#the-firewall

                # https://symfony.com/doc/current/security/impersonating_user.html
                # switch_user: true

        # Easy way to control access for large sections of your site
        # Note: Only the *first* access control that matches will be used
        access_control:
            # - { path: ^/admin, roles: ROLE_ADMIN }
            # - { path: ^/profile, roles: ROLE_USER }

    when@test:
        security:
            password_hashers:
                # By default, password hashers are resource intensive and take time. This is
                # important to generate secure password hashes. In tests however, secure hashes
                # are not important, waste resources and increase test times. The following
                # reduces the work factor to the lowest possible values.
                Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                    algorithm: auto
                    cost: 4 # Lowest possible value for bcrypt
                    time_cost: 3 # Lowest possible value for argon
                    memory_cost: 10 # Lowest possible value for argon


- Ahora editamos el controlador **UserController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    use Symfony\Component\HttpFoundation\Request;
    use Doctrine\ORM\EntityManagerInterface;
    use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
    // importamos la librería de autenticación:
    use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;

    use App\Entity\User;
    use App\Form\UserType;

    class UserController extends AbstractController
    {   // cargamos la librería de autenticación en el método:
        public function login(AuthenticationUtils $authenticationUtils): Response 
        {   
            // creamos un caso de error en una variable:
            $error = $authenticationUtils->getLastAuthenticationError();
            // obtener el último usuario:
            $lastUsername = $authenticationUtils->getLastUsername();

            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 
            
            return $this->render('user/login.html.twig', [
                'registration_form' => $registrationForm->createView(),
                'last_username' => $lastUsername, // pasamos el error y el ultimo usuario a la vista
                'error' => $error
            ]);
        }
        
        public function register(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher): Response
        {   
            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 

            $registrationForm->handleRequest($request);
            if($registrationForm->isSubmitted()){
                if($registrationForm->isValid()){
                    $user->setRoles(['ROLE_USER']);
                    $plainPassword = $registrationForm->get('password')->getData();
                    $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                    $user->setPassword($hashedPassword);

                    $doctrine->persist($user);
                    $doctrine->flush();
                    return $this->redirectToRoute('login');
                }
            }
        }
    }

- Editamos la plantilla **login.html.twig**:

.. code-block:: html 

    {% extends 'base.html.twig' %}

    {% block title %}Iniciar Sesión{% endblock %}

    {% block body %}
    <style>
        .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
        .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
    </style>

    <!-- cargamos un formulario tal y como se describe en la documentación oficial: -->
    <form action="{{ path('login')}}" method="post">
        <label for="username">Email</label>
        <input type="text" id="username" name="_username" value="{{last_username}}" />
        
        <label for="password">Password</label>
        <input type="text" id="password" name="_password" />

        <button type="submit">Login</button>
    </form>

    <div class="row">
        <div class="col">
            <form id="userForm" action="{{path('register')}}" method="post" role="form" class="row">
                {{ form_row(registration_form._token) }}

                {{ form_label(registration_form.email, 'email', {'label_attr': {'style': 'display:none'}}) }}
                {{ form_widget(registration_form.email, {'attr': {'class': 'form-control mt-3', 'placeholder':'Email'}}) }}
                {{ form_errors(registration_form.email) }}
                
                {{ form_label(registration_form.password, 'password', {'label_attr': {'style': 'display:none'}}) }}
                {{ form_widget(registration_form.password, {'attr':{'class': 'form-control mt-3', 'placeholder': 'Contraseña', 'type':'password'}}) }}
                {{ form_errors(registration_form.password, {'attr': {'class': 'col-md-3'}}) }}
                
                <input type="submit" class="btn btn-success form-control mt-3" value="Darse de alta" />
            </form>
        </div>
    </div>

    {% endblock %}

- Si iniciamos sesión con un usuario ya creado nos mostrará en la barra de estado de desarrollo el usuario con el que hemos iniciado sesión.

Paso 6: Crear Logout 
********************

- Vamos a crear por convención un método para logout vacío en **UserController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    use Symfony\Component\HttpFoundation\Request;
    use Doctrine\ORM\EntityManagerInterface;
    use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
    use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;

    use App\Entity\User;
    use App\Form\UserType;

    class UserController extends AbstractController
    {   
        public function login(AuthenticationUtils $authenticationUtils): Response 
        {   
            $error = $authenticationUtils->getLastAuthenticationError();
            $lastUsername = $authenticationUtils->getLastUsername();

            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 
            
            return $this->render('user/login.html.twig', [
                'registration_form' => $registrationForm->createView(),
                'last_username' => $lastUsername, 
                'error' => $error
            ]);
        }

        // creamos el método logout, es un método que no retorna nada:
        public function logout(): void {}
        
        public function register(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher): Response
        {   
            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 

            $registrationForm->handleRequest($request);
            if($registrationForm->isSubmitted()){
                if($registrationForm->isValid()){
                    $user->setRoles(['ROLE_USER']);
                    $plainPassword = $registrationForm->get('password')->getData();
                    $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                    $user->setPassword($hashedPassword);

                    $doctrine->persist($user);
                    $doctrine->flush();
                    return $this->redirectToRoute('login');
                }
            }
        }
    }

- Añadimos la ruta a **routes.yaml**:

.. code-block:: yaml

    index:
    path: /
    controller: App\Controller\TaskController::index

    finish:
        path: /tasks/finish/{id}
        controller: App\Controller\TaskController::finish

    delete:
        path: /tasks/delete/{id}
        controller: App\Controller\TaskController::delete

    update:
        path: /tasks/update/{id}
        controller: App\Controller\TaskController::update

    login: 
        path: /login
        controller: App\Controller\UserController::login

    # Añadimos la ruta para iniciar sesión y registro:
    logout:
        path: /logout
        controller: App\Controller\UserController::logout
        
    register: 
        path: /register
        controller: App\Controller\UserController::register

- Registramos el logout en el firewall de **security.yaml**:

.. code-block:: yaml

    security:
        # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
        providers:
            # used to reload user from session & other features (e.g. switch_user)
            app_user_provider:
                entity:
                    class: App\Entity\User
                    property: email
        firewalls:
            dev:
                pattern: ^/(_(profiler|wdt)|css|images|js)/
                security: false
            main:
                lazy: true
                provider: app_user_provider
                form_login:
                    login_path: login
                    check_path: login
                # añadimos la línea logout que apunta al path logout en las rutas:
                logout:
                    path: logout

                # activate different ways to authenticate
                # https://symfony.com/doc/current/security.html#the-firewall

                # https://symfony.com/doc/current/security/impersonating_user.html
                # switch_user: true

        # Easy way to control access for large sections of your site
        # Note: Only the *first* access control that matches will be used
        access_control:
            # - { path: ^/admin, roles: ROLE_ADMIN }
            # - { path: ^/profile, roles: ROLE_USER }

    when@test:
        security:
            password_hashers:
                # By default, password hashers are resource intensive and take time. This is
                # important to generate secure password hashes. In tests however, secure hashes
                # are not important, waste resources and increase test times. The following
                # reduces the work factor to the lowest possible values.
                Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                    algorithm: auto
                    cost: 4 # Lowest possible value for bcrypt
                    time_cost: 3 # Lowest possible value for argon
                    memory_cost: 10 # Lowest possible value for argon


Paso 7: Modificar Aspecto de Login y Registro
*********************************************

- Creamos una nueva hoja de estilos en la carpeta **css** llamada **login_style.css**:

.. code-block:: css

    html,
    .bodystyle {
        height: 100vh;
    }

    .bodystyle {
        display: flex;
        align-items: center;
        padding-top: 40px;
        padding-bottom: 40px;
        background-color: #f5f5f5;
    }

    .form-signin {
        width: 100%;
        max-width: 330px;
        padding: 15px;
        margin: auto;
    }

    .form-signin .checkbox {
        font-weight: 400;
    }

    .form-signin .form-floating:focus-within {
        z-index: 2;
    }

    .form-signin input[type="email"] {
        margin-bottom: -1px;
        border-bottom-right-radius: 0;
        border-bottom-left-radius: 0;
    }

    .form-signin input[type="password"] {
        margin-bottom: 10px;
        border-top-left-radius: 0;
        border-top-right-radius: 0;
    }

    .cursor{
        border: 0px;
        background: transparent;
    }

- Vamos a la plantilla base y la añadimos con la condicion de que trabaje en la ruta **login** y **reset_password** (esta última la veremos mas adelante):

.. code-block:: html 

    <!DOCTYPE html>
    <html>
        <head>
            <meta charset="UTF-8">
            <title>{% block title %}Task Learn{% endblock %}</title>
            <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text></svg>">
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
            <link rel="stylesheet" href="{{asset('assets/css/base.css')}}" />
            <!-- Esta hoja comprueba si la ruta es login o reset_password para cargarse: -->
           {% if app.request.get('_route') in ['login','reset_password'] %}
                <link rel="stylesheet" href="{{asset('assets/css/login_style.css')}}" />
            {% endif %}
            {# Run `composer require symfony/webpack-encore-bundle` to start using Symfony UX #}
            {% block stylesheets %}
                {{ encore_entry_link_tags('app') }}
            {% endblock %}

            {% block javascripts %}
                {{ encore_entry_script_tags('app') }}
            {% endblock %}
        </head>
        <body>
            <!-- Ocultar navbar cuando la ruta sea login o register: -->
            {% if app.request.get('_route') not in ['login','reset_password'] %}
                <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
                    <div class="col-md-11 align-items-start ms-2" >
                        <a href="{{ path('index') }}" class="navbar-brand">Task Learn</a>
                    </div>
                    
                    <ul class="navbar-nav mb-2 mb-lg-0 col-md-1 align-items-end me-3">
                        <li class="nav-item align-items-end">
                            <a href="/users" class="nav-link text-center">
                                <img class="avatar rounded img-thumbnail img-fluid" src="./assets/images/avatar.png" alt="foto" />
                                <div class="col">
                                    <small>Usuario</small>
                                </div>
                            </a>
                        </li>
                    </ul>
                </nav>
            {% endif %}

            {% block body %}{% endblock %}

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>
            <script src="{{asset('assets/js/base.js')}}"></script>
        </body>
    </html>


- Vamos a modificar la plantilla de login y registro para que muestre el login como principal y el registro en un modal en **login.html.twig**:

.. code-block:: html 

    {% extends 'base.html.twig' %}

    {% block title %}Iniciar Sesión{% endblock %}

    {% block body %}
    <style>
        .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
        .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
    </style>

    <!-- creamos una estructura para mostrar el login: -->
    <div class="bodystyle text-center" cz-shortcut-listen="true">
        <div class="form-signin text-center">
            <h1>Por favor inicia sesión</h1>
            <form action="{{ path('login')}}" method="post">
                <div class="form-floating">
                    <input type="email" id="username" name="_username" value="{{last_username}}" class="form-control" />
                    <label htmlFor="floatingInput">Email</label>
                </div>
                <div class="form-floating">
                    <input type="password" id="password" name="_password" class="form-control" />
                    <label htmlFor="floatingPassword">Contraseña</label>
                </div>
                <div class="mb-3">
                <button type="button" class="cursor" data-bs-toggle="modal" data-bs-target="#registerUser"  data-bs-toggle="modal" data-bs-target="#registerUser">Crear usuario</button>
                </div>
                <div class="mb-3">
                <button type="button" class="cursor">¿has olvidado la contraseña?</button>
                </div>
                <button class="w-100 btn btn-lg btn-primary" type="submit">Iniciar sesión</button>
            </form>
        </div>
    </div>

    <!-- Modal para crear usuarios: -->
    <div class="modal fade" id="registerUser" tabIndex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Registro</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col">
                        <div class="row">
                            <div class="container">
                                <form id="userForm" action="{{path('register')}}" method="post" role="form" class="container">
                                    {{ form_row(registration_form._token) }}

                                    {{ form_label(registration_form.email, 'email', {'label_attr': {'style': 'display:none'}}) }}
                                    {{ form_widget(registration_form.email, {'attr': {'class': 'form-control mt-3', 'placeholder':'Email'}}) }}
                                    {{ form_errors(registration_form.email) }}
                                    
                                    {{ form_label(registration_form.password, 'password', {'label_attr': {'style': 'display:none'}}) }}
                                    {{ form_widget(registration_form.password, {'attr':{'class': 'form-control mt-3', 'placeholder': 'Contraseña', 'type':'password'}}) }}
                                    {{ form_errors(registration_form.password, {'attr': {'class': 'col-md-3'}}) }}
                                    
                                    <input type="submit" class="btn btn-success form-control mt-3" value="Darse de alta" />
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            </div>
        </div>
    </div>

    {% endblock %}


Paso 8: Relacionar tareas con usuarios
**************************************

- Editamos el controlador para asignar el usuario que ha iniciado sesión a la tarea en **TaskController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    use Doctrine\ORM\EntityManagerInterface;
    use App\Entity\Task;
    // importamos user:
    use App\Entity\User;
    use Symfony\Component\HttpFoundation\Request;
    use App\Form\TaskType;

    class TaskController extends AbstractController
    {   
        public function index(Request $request, EntityManagerInterface $doctrine): Response
        {
            // localizamos el usuario a través del token que esta usando en sesión:
            $user = $this->getUser();
            // filtramos la recuperacion de tareas para solo coger las del propietario:
            $tasks = $doctrine->getRepository(Task::class)->findBy(['owner' => $user]);
            $task = new Task();
            $form = $this->createForm(TaskType::class, $task);
            $form->handleRequest($request);

            if($form->isSubmitted() && $form->isValid()){
                $task->setDateCreated(new \DateTime())
                    ->setIsComplete(false)
                    ->setOwner($user); // le pasamos el usuario a la clave foranea de la tarea
                $doctrine->persist($task);
                $doctrine->flush();
                return $this->redirectToRoute('index');
            }

            return $this->render('task/index.html.twig', [
                'tasks' => $tasks,
                'taskForm' => $form->createView(),
                'taskEditForm' => $form->createView()
            ]);
        }

        public function finish($id, EntityManagerInterface $doctrine): Response
        {
            // localizamos el usuario a través del token que esta usando en sesión:
            $user = $this->getUser();
            // del mismo modo vamos a filtrar las tareas para no finalizar las de otros usuarios:
            $task = $doctrine->getRepository(Task::class)->findOneBy(['id' => $id, 'owner' => $user]);

            // comprobamos que hemos recuperado una tarea:
            if($task){
                $task->setIsComplete(true)
                    ->setDateFinish(new \DateTime());
            
                $doctrine->persist($task);
                $doctrine->flush(); 
            }
            return $this->redirectToRoute('index');
        }

        public function delete($id, EntityManagerInterface $doctrine): Response
        {
            // localizamos el usuario a través del token que esta usando en sesión:
            $user = $this->getUser();
            // del mismo modo vamos a filtrar las tareas para no eliminar las de otros usuarios:
            $task = $doctrine->getRepository(Task::class)->findOneBy(['id' => $id, 'owner' => $user]);
            if($task){
                $doctrine->remove($task);
                $doctrine->flush(); 
            }

            return $this->redirectToRoute('index');
        }

        public function update($id, EntityManagerInterface $doctrine, Request $request): Response
        {
            // localizamos el usuario a través del token que esta usando en sesión:
            $user = $this->getUser();
            // del mismo modo vamos a filtrar las tareas para no eliminar las de otros usuarios:
            $task = $doctrine->getRepository(Task::class)->findOneBy(['id' => $id, 'owner' => $user]);
            if($task){
                dump($request->query->get('name'));
                $form = $this->createForm(TaskType::class, $task);
                $form->handleRequest($request);
                if($form->isSubmitted() && $form->isValid()){
                    $doctrine->flush();
                }
            }

            return $this->redirectToRoute('index');
            
        }

    }


Paso 9: Perfil de usuario y edición
***********************************

- Editamos el formulario para gestionar las contraseñas y los archivos en **UserType.php**:

.. code-block:: php 

    <?php

    namespace App\Form;

    use App\Entity\User;
    use Symfony\Component\Form\AbstractType;
    use Symfony\Component\Form\FormBuilderInterface;
    use Symfony\Component\OptionsResolver\OptionsResolver;
    // añadimos el passwordType y el emailtype: 
    use Symfony\Component\Form\Extension\Core\Type\PasswordType;
    use Symfony\Component\Form\Extension\Core\Type\EmailType;
    // también añadimos el Filetype para subir archivos y el File para crear un nuevo objeto archivo:
    use Symfony\Component\Form\Extension\Core\Type\FileType;
    use Symfony\Component\Validator\Constraints\File;


    class UserType extends AbstractType
    {
        public function buildForm(FormBuilderInterface $builder, array $options): void
        {
            $builder
                ->add('email', EmailType::class, array(
                    'required' => true, // que sea requerido 
                ))
                // Eliminamos los roles ya que nos los vamos a usar: ->add('roles')
                ->add('password', PasswordType::class, array(
                    'required' => false, // que sea requerido
                    'empty_data' => '' // definimos un valor vacio si no se escribe nada en la contraseña
                ))
                ->add('name')
                ->add('lastname')
                ->add('avatar', FileType::class, [
                    'required' => false, // que no sea requerido
                    'data_class' => null, // evita un fallo en symfony con la clase del archivo
                    'constraints' => [ // los constraints son las limitaciones a la hora de subir el archivo:
                        new File([
                            'maxSize' => '1024k',
                            'mimeTypes' => [
                                'image/jpeg',
                                'image/jpg',
                                'image/png'
                            ],
                            'mimeTypesMessage' => 'El formato de archivo no es correcto'
                        ])
                    ]
                ])
            ;
        }

        public function configureOptions(OptionsResolver $resolver): void
        {
            $resolver->setDefaults([
                'data_class' => User::class,
            ]);
        }
    }


- Vamos a hacer es crear un método para ver los datos del usuario en **UserController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    use Symfony\Component\HttpFoundation\Request;
    use Doctrine\ORM\EntityManagerInterface;
    use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
    use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
    // importamos la librería slugger y las librerías para trabajar con archivos:
    use Symfony\Component\String\Slugger\SluggerInterface;
    use Symfony\Component\HttpFoundation\File\Exception\FileException;
    use Symfony\Component\HttpFoundation\File\UploadedFile;

    use App\Entity\User;
    use App\Form\UserType;

    class UserController extends AbstractController
    {   
        public function login(AuthenticationUtils $authenticationUtils): Response 
        {   
            $error = $authenticationUtils->getLastAuthenticationError();
            $lastUsername = $authenticationUtils->getLastUsername();

            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 
            
            return $this->render('user/login.html.twig', [
                'registration_form' => $registrationForm->createView(),
                'last_username' => $lastUsername, 
                'error' => $error
            ]);
        }

        // creamos el método logout, es un método que no retorna nada:
        public function logout(): void {}
        
        public function register(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher): Response
        {   
            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 

            $registrationForm->handleRequest($request);
            if($registrationForm->isSubmitted()){
                if($registrationForm->isValid()){
                    $user->setRoles(['ROLE_USER']);
                    $plainPassword = $registrationForm->get('password')->getData();
                    $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                    $user->setPassword($hashedPassword);

                    $doctrine->persist($user);
                    $doctrine->flush();
                    return $this->redirectToRoute('login');
                }
            }
        }
        // creamos el nuevo método para editar el perfil:
        public function profile(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher,
            SluggerInterface $slugger // cargamos la librería slugger
        ): Response
        {
            // localizamos el usuario a través del token que esta usando en sesión:
            $user = $this->getUser();
            // comprobamos si tenemos una imagen ya registrada y la cargamos en avatar:
            $isAvatar = $user->getAvatar();

            if($isAvatar){
                $avatar = './uploads/avatars/' . $user->getAvatar();
            }else{
                $avatar = './assets/images/avatar.png';
            }

            // creamos una variable para el password antiguo:
            $oldPassword = $user->getPassword();
            // cargamos el usuario en el formulario:
            $userEditForm = $this->createForm(UserType::class, $user); 
            
            // recuperamos los datos de la request y los cargamos en el formulario para validarlos:
            $userEditForm->handleRequest($request);
            
            if($userEditForm->isSubmitted()){
                if($userEditForm->isValid()){
                    // obtener el archivo:
                    $file = $userEditForm->get('avatar')->getData();
                    // comprobamos si existe un archivo:
                    if($file){
                        // recuperamos el nombre del archivo:
                        $originalFilename = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME);
                        // lo cambiamos por un nombre seguro:
                        $safeFilename = $slugger->slug($originalFilename);
                        // y le agregamos un identificador único:
                        $newFilename = $safeFilename . '-' . uniqid() . '.' . $file->guessExtension();
                        // controlamos lo que nos va a llegar:
                        try{
                            // movemos el archivo al directorio correspondiente en el proyecto:
                            $file->move(
                                $this->getParameter('avatars'), 
                                $newFilename
                            );
                        }catch(FileException $e){
                            // ignoramos el error y seguimos adelante
                        }

                        // grabamos en la base de datos el nombre del archivo:
                        $user->setAvatar($newFilename);
                    }else{ // si no se ha cargado un archivo para evitar borrar el actual volvemos a escribirlo usando la variable de comprobación:
                        $user->setAvatar($isAvatar);
                    }

                    $plainPassword = $userEditForm->get('password')->getData();
                    // solo cambiará la contraseña si recibe algo por el campo contraseña:
                    if($plainPassword){
                        $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                        $user->setPassword($hashedPassword);
                    }else{
                        // sino pegara el hash del antiguo password:
                        $user->setPassword($oldPassword);
                    }

                    $doctrine->flush();
                    return $this->redirectToRoute('profile');
                }
            }

            // retornamos en el template el formulario con los datos:
            return $this->render('user/profile.html.twig', [
                'user_edit_form' => $userEditForm->createView(),
                'avatar' => $avatar
            ]);
        }
    }


- Creamos una nueva plantilla en **user** llamada **profile.html.twig**:

.. code-block:: html 

    {% extends 'base.html.twig' %}

    {% block title %}Perfil de usuario{% endblock %}

    {% block body %}

    <div class="container mt-4 text-center">
                <h3>Datos de usuario</h3>
                <hr />
                <!-- la imagen vamos a cargarla desde controlador -->
                <img src="{{avatar}}" class="avatarEdit rounded img-thumbnail img-fluid"  alt="Avatar" />
                <!-- No olvides poner que el formulario es tipo multipart -->
                <form id="userEditForm" action="" method="post" role="form" enctype='multipart/form-data'>
                    {{ form_row(user_edit_form._token) }}
                    <div class="row">
                        <div class="col-md-12 mt-3">
                            {{ form_label(user_edit_form.avatar, 'avatar', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(user_edit_form.avatar, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder': 'Avatar'}}) }}
                            {{ form_errors(user_edit_form.avatar) }}
                        </div>
                        <div class="col-md-12 mt-3">
                            {{ form_label(user_edit_form.name, 'name', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(user_edit_form.name, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder': 'Nombre'}}) }}
                            {{ form_errors(user_edit_form.name) }}
                        </div>
                        <div class="col-md-12 mt-3">
                            {{ form_label(user_edit_form.lastname, 'lastname', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(user_edit_form.lastname, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder': 'Apellidos'}}) }}
                            {{ form_errors(user_edit_form.lastname) }}
                        </div>
                        <div class="col-md-12 mt-3">
                            {{ form_label(user_edit_form.email, 'email', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(user_edit_form.email, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder': 'Email'}}) }}
                            {{ form_errors(user_edit_form.email) }}
                        </div>
                        <div class="col-md-12 mt-3">
                            {{ form_label(user_edit_form.password, 'password', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(user_edit_form.password, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder': 'Contraseña (dejar en blanco para no cambiar)'}}) }}
                            {{ form_errors(user_edit_form.password) }}
                        </div>
                        <div class="col-md-12 mt-3">            
                            <input type="submit" class="btn btn-success form-control mt-3" value="Actualizar datos" />
                        </div>
                        <div class="col-md-12 mt-3">
                            <a href="{{path('logout')}}">Cerrar sesión</a>
                        </div>
                    </div>
                </form>
    </div>

    {% endblock %}

    
- Creamos la ruta en **routes.yaml**:

.. code-block:: yaml 

    index:
        path: /
        controller: App\Controller\TaskController::index

    finish:
        path: /tasks/finish/{id}
        controller: App\Controller\TaskController::finish

    delete:
        path: /tasks/delete/{id}
        controller: App\Controller\TaskController::delete

    update:
        path: /tasks/update/{id}
        controller: App\Controller\TaskController::update

    login: 
        path: /login
        controller: App\Controller\UserController::login

    logout:
        path: /logout
        controller: App\Controller\UserController::logout

    register: 
        path: /register
        controller: App\Controller\UserController::register

    # cargamos la ruta para editar perfil:
    profile:
        path: /profile
        controller: App\Controller\UserController::profile


- Y debemos especificar la ruta donde se van a guardar los avatars en **config/services.yaml**:

.. code-block:: yaml

    # This file is the entry point to configure your own services.
    # Files in the packages/ subdirectory configure your dependencies.

    # Put parameters here that don't need to change on each machine where the app is deployed
    # https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
    parameters:
        # añadimos el directorio donde se van a guardar los avatares:
        avatars: '%kernel.project_dir%/public/uploads/avatars'
    services:
        # default configuration for services in *this* file
        _defaults:
            autowire: true      # Automatically injects dependencies in your services.
            autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

        # makes classes in src/ available to be used as services
        # this creates a service per class whose id is the fully-qualified class name
        App\:
            resource: '../src/'
            exclude:
                - '../src/DependencyInjection/'
                - '../src/Entity/'
                - '../src/Kernel.php'

        # add more service definitions when explicit configuration is needed
        # please note that last definitions always *replace* previous ones

- Ajustamos el css del avatar para que no sea tan grande la imagen en **base.css**:

.. code-block:: css 

    .avatar{
        height: 40px;
        width: 40px;
    }

    .avatarEdit{
        width: 200px;
        height: 200px;
    }


Paso 10: Cargar avatar, rutas y nombre en navbar
************************************************

- En primer lugar editamos la plantilla **base.html.twig**:

.. code-block:: html 

    <!DOCTYPE html>
    <html>
        <head>
            <meta charset="UTF-8">
            <title>{% block title %}Task Learn{% endblock %}</title>
            <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text></svg>">
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
            <link rel="stylesheet" href="{{asset('assets/css/base.css')}}" />
           {% if app.request.get('_route') in ['login','reset_password'] %}
                <link rel="stylesheet" href="{{asset('assets/css/login_style.css')}}" />
            {% endif %}
            {# Run `composer require symfony/webpack-encore-bundle` to start using Symfony UX #}
            {% block stylesheets %}
                {{ encore_entry_link_tags('app') }}
            {% endblock %}

            {% block javascripts %}
                {{ encore_entry_script_tags('app') }}
            {% endblock %}
        </head>
        <body>
            {% if app.request.get('_route') not in ['login','reset_password'] %}
                <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
                    <div class="col-md-11 align-items-start ms-2" >
                        <a href="{{ path('index') }}" class="navbar-brand">Task Learn</a>
                    </div>
                    
                    <ul class="navbar-nav mb-2 mb-lg-0 col-md-1 align-items-end me-3">
                        <li class="nav-item align-items-end">
                            <!-- cambiamos la ruta por profile: -->
                            <a href="{{path('profile')}}" class="nav-link text-center">
                            <!-- cambiamos por la variable avatar y username (OJO: para evitar erroes abrá que cargarlo en cada controlador) -->
                                <img class="avatar rounded img-thumbnail img-fluid" src="{{avatar}}" alt="foto" />
                                <div class="col">
                                    <small>{{username}}</small>
                                </div>
                            </a>
                        </li>
                    </ul>
                </nav>
            {% endif %}

            {% block body %}{% endblock %}

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>
            <script src="{{asset('assets/js/base.js')}}"></script>
        </body>
    </html>

- A continuación vamos a editar el controlador **UserController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    use Symfony\Component\HttpFoundation\Request;
    use Doctrine\ORM\EntityManagerInterface;
    use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
    use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
    use Symfony\Component\String\Slugger\SluggerInterface;
    use Symfony\Component\HttpFoundation\File\Exception\FileException;
    use Symfony\Component\HttpFoundation\File\UploadedFile;

    use App\Entity\User;
    use App\Form\UserType;

    class UserController extends AbstractController
    {   
        public function login(AuthenticationUtils $authenticationUtils): Response 
        {   
            $error = $authenticationUtils->getLastAuthenticationError();
            $lastUsername = $authenticationUtils->getLastUsername();

            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 
            
            return $this->render('user/login.html.twig', [
                'registration_form' => $registrationForm->createView(),
                'last_username' => $lastUsername, 
                'error' => $error
            ]);
        }

        public function logout(): void {}
        
        public function register(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher): Response
        {   
            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 

            $registrationForm->handleRequest($request);
            if($registrationForm->isSubmitted()){
                if($registrationForm->isValid()){
                    $user->setRoles(['ROLE_USER']);
                    $plainPassword = $registrationForm->get('password')->getData();
                    $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                    $user->setPassword($hashedPassword);

                    $doctrine->persist($user);
                    $doctrine->flush();
                    return $this->redirectToRoute('login');
                }
            }
        }

        public function profile(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher,
            SluggerInterface $slugger 
        ): Response
        {
            $user = $this->getUser();
            $isAvatar = $user->getAvatar();
            // cargamos el nombre de usuario:
            $username = $user->getName();

            if($isAvatar){
                $avatar = './uploads/avatars/' . $user->getAvatar();
            }else{
                $avatar = './assets/images/avatar.png';
            }

            $oldPassword = $user->getPassword();
            $userEditForm = $this->createForm(UserType::class, $user); 
            
            $userEditForm->handleRequest($request);
            
            if($userEditForm->isSubmitted()){
                if($userEditForm->isValid()){
                    $file = $userEditForm->get('avatar')->getData();
                    if($file){
                        $originalFilename = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME);
                        $safeFilename = $slugger->slug($originalFilename);
                        $newFilename = $safeFilename . '-' . uniqid() . '.' . $file->guessExtension();
                        try{
                            $file->move(
                                $this->getParameter('avatars'), 
                                $newFilename
                            );
                        }catch(FileException $e){
                            // ignoramos el error y seguimos adelante
                        }

                        $user->setAvatar($newFilename);
                    }else{ 
                        $user->setAvatar($isAvatar);
                    }

                    $plainPassword = $userEditForm->get('password')->getData();
                    if($plainPassword){
                        $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                        $user->setPassword($hashedPassword);
                    }else{
                        $user->setPassword($oldPassword);
                    }

                    $doctrine->flush();
                    return $this->redirectToRoute('profile');
                }
            }

            return $this->render('user/profile.html.twig', [
                'user_edit_form' => $userEditForm->createView(),
                'avatar' => $avatar, // ya estamos cargando el avatar
                'username' => $username // cargamos el username
            ]);
        }
    }

- Finalmente editamos **TaskController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    use Doctrine\ORM\EntityManagerInterface;
    use App\Entity\Task;
    use App\Entity\User;
    use Symfony\Component\HttpFoundation\Request;
    use App\Form\TaskType;

    class TaskController extends AbstractController
    {   
        public function index(Request $request, EntityManagerInterface $doctrine): Response
        {
            $user = $this->getUser();
            // cargamos el avatar:
            $isAvatar = $user->getAvatar();
            // cargamos el nombre de usuario:
            $username = $user->getName();

            // comprobamos también si hay avatar o no:
            if($isAvatar){
                $avatar = './uploads/avatars/' . $user->getAvatar();
            }else{
                $avatar = './assets/images/avatar.png';
            }

            $tasks = $doctrine->getRepository(Task::class)->findBy(['owner' => $user]);
            $task = new Task();
            $form = $this->createForm(TaskType::class, $task);
            $form->handleRequest($request);

            if($form->isSubmitted() && $form->isValid()){
                $task->setDateCreated(new \DateTime())
                    ->setIsComplete(false)
                    ->setOwner($user); 
                $doctrine->persist($task);
                $doctrine->flush();
                return $this->redirectToRoute('index');
            }

            return $this->render('task/index.html.twig', [
                'tasks' => $tasks,
                'taskForm' => $form->createView(),
                'taskEditForm' => $form->createView(),
                // cargamos para la plantilla los elementos:
                'avatar' => $avatar,
                'username' => $username
            ]);
        }

        public function finish($id, EntityManagerInterface $doctrine): Response
        {
            $user = $this->getUser();
            $task = $doctrine->getRepository(Task::class)->findOneBy(['id' => $id, 'owner' => $user]);

            if($task){
                $task->setIsComplete(true)
                    ->setDateFinish(new \DateTime());
            
                $doctrine->persist($task);
                $doctrine->flush(); 
            }
            return $this->redirectToRoute('index');
        }

        public function delete($id, EntityManagerInterface $doctrine): Response
        {
            $user = $this->getUser();
            $task = $doctrine->getRepository(Task::class)->findOneBy(['id' => $id, 'owner' => $user]);
            if($task){
                $doctrine->remove($task);
                $doctrine->flush(); 
            }

            return $this->redirectToRoute('index');
        }

        public function update($id, EntityManagerInterface $doctrine, Request $request): Response
        {
            $user = $this->getUser();
            $task = $doctrine->getRepository(Task::class)->findOneBy(['id' => $id, 'owner' => $user]);
            if($task){
                dump($request->query->get('name'));
                $form = $this->createForm(TaskType::class, $task);
                $form->handleRequest($request);
                if($form->isSubmitted() && $form->isValid()){
                    $doctrine->flush();
                }
            }

            return $this->redirectToRoute('index');
            
        }

    }


Paso 11: Securizar Rutas 
************************

- Para securizar rutas añadimos al **access_control** la ruta en **security.yaml**:

.. code-block:: yaml

    security:
        # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
        providers:
            # used to reload user from session & other features (e.g. switch_user)
            app_user_provider:
                entity:
                    class: App\Entity\User
                    property: email
        firewalls:
            dev:
                pattern: ^/(_(profiler|wdt)|css|images|js)/
                security: false
            main:
                lazy: true
                provider: app_user_provider
                form_login:
                    login_path: login
                    check_path: login
                logout:
                    path: logout

                # activate different ways to authenticate
                # https://symfony.com/doc/current/security.html#the-firewall

                # https://symfony.com/doc/current/security/impersonating_user.html
                # switch_user: true

        # Easy way to control access for large sections of your site
        # Note: Only the *first* access control that matches will be used
        access_control:
            # - { path: ^/admin, roles: ROLE_ADMIN }
            # - { path: ^/profile, roles: ROLE_USER }
            # añadimos aquí la ruta raiz y la del usuario:
            - { path: ^/$, roles: ROLE_USER }
            - { path: ^/user, roles: ROLE_USER }

    when@test:
        security:
            password_hashers:
                # By default, password hashers are resource intensive and take time. This is
                # important to generate secure password hashes. In tests however, secure hashes
                # are not important, waste resources and increase test times. The following
                # reduces the work factor to the lowest possible values.
                Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                    algorithm: auto
                    cost: 4 # Lowest possible value for bcrypt
                    time_cost: 3 # Lowest possible value for argon
                    memory_cost: 10 # Lowest possible value for argon

- Con esto ya solo podemos acceder iniciando sesión. Prueba a hacer logout e intenta acceder y te debe redirigir a la ruta login.

Paso 12: Recuperar contraseña (email)
*************************************

- Lo primero que tenemos que hacer es registrarnos en https://mailtrap.io/ 
- En mailtrap, elegimos en el apartado __Integrations__ Symfony 5+ y copiamos la linea que nos muestra de __MAILER_DSN__
- Editamos el archivo .env y añadimos la información del servidor de correo:

.. code-block:: yaml

    # In all environments, the following files are loaded if they exist,
    # the latter taking precedence over the former:
    #
    #  * .env                contains default values for the environment variables needed by the app
    #  * .env.local          uncommitted file with local overrides
    #  * .env.$APP_ENV       committed environment-specific defaults
    #  * .env.$APP_ENV.local uncommitted environment-specific overrides
    #
    # Real environment variables win over .env files.
    #
    # DO NOT DEFINE PRODUCTION SECRETS IN THIS FILE NOR IN ANY OTHER COMMITTED FILES.
    # https://symfony.com/doc/current/configuration/secrets.html
    #
    # Run "composer dump-env prod" to compile .env files for production use (requires symfony/flex >=1.2).
    # https://symfony.com/doc/current/best_practices.html#use-environment-variables-for-infrastructure-configuration

    ###> symfony/webapp-pack ###
    MESSENGER_TRANSPORT_DSN=doctrine://default?auto_setup=0
    ###< symfony/webapp-pack ###

    ###> symfony/framework-bundle ###
    APP_ENV=dev
    APP_SECRET=0c15b00ac6370aa12e08a36e4c4e5ef7
    ###< symfony/framework-bundle ###

    ###> doctrine/doctrine-bundle ###
    # Format described at https://www.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#connecting-using-a-url
    # IMPORTANT: You MUST configure your server version, either here or in config/packages/doctrine.yaml
    #
    # DATABASE_URL="sqlite:///%kernel.project_dir%/var/data.db"
    DATABASE_URL="mysql://root:@127.0.0.1:3306/symfony_task_learn?serverVersion=8&charset=utf8mb4"
    # DATABASE_URL="postgresql://app:!ChangeMe!@127.0.0.1:5432/app?serverVersion=14&charset=utf8"
    ###< doctrine/doctrine-bundle ###

    ###> symfony/messenger ###
    # Choose one of the transports below
    # MESSENGER_TRANSPORT_DSN=doctrine://default
    # MESSENGER_TRANSPORT_DSN=amqp://guest:guest@localhost:5672/%2f/messages
    # MESSENGER_TRANSPORT_DSN=redis://localhost:6379/messages
    ###< symfony/messenger ###

    ###> symfony/mailer ###
    MAILER_DSN=smtp://6c40b3252c8798:53a66737d4ef3f@smtp.mailtrap.io:2525?encryption=tls&auth_mode=login
    ###< symfony/mailer ###

- nos vamos a la carpeta **config/packages** y editamos **messenger.yaml**:

.. code-block:: yaml

    framework:
        messenger:
            failure_transport: failed

            transports:
                # https://symfony.com/doc/current/messenger.html#transport-configuration
                async:
                    dsn: '%env(MESSENGER_TRANSPORT_DSN)%'
                    options:
                        use_notify: true
                        check_delayed_interval: 60000
                    retry_strategy:
                        max_retries: 3
                        multiplier: 2
                failed: 'doctrine://default?queue_name=failed'
                # sync: 'sync://'

            routing:
                # Comentamos esta línea ya que da problemas en la versión 6:
                # Symfony\Component\Mailer\Messenger\SendEmailMessage: async
                Symfony\Component\Notifier\Message\ChatMessage: async
                Symfony\Component\Notifier\Message\SmsMessage: async

                # Route your messages to the transports
                # 'App\Message\YourMessage': async


- Vamos a añadir unas claves a **.env**:

.. code-block::

    # In all environments, the following files are loaded if they exist,
    # the latter taking precedence over the former:
    #
    #  * .env                contains default values for the environment variables needed by the app
    #  * .env.local          uncommitted file with local overrides
    #  * .env.$APP_ENV       committed environment-specific defaults
    #  * .env.$APP_ENV.local uncommitted environment-specific overrides
    #
    # Real environment variables win over .env files.
    #
    # DO NOT DEFINE PRODUCTION SECRETS IN THIS FILE NOR IN ANY OTHER COMMITTED FILES.
    # https://symfony.com/doc/current/configuration/secrets.html
    #
    # Run "composer dump-env prod" to compile .env files for production use (requires symfony/flex >=1.2).
    # https://symfony.com/doc/current/best_practices.html#use-environment-variables-for-infrastructure-configuration

    ###> symfony/webapp-pack ###
    MESSENGER_TRANSPORT_DSN=doctrine://default?auto_setup=0
    ###< symfony/webapp-pack ###

    ###> symfony/framework-bundle ###
    APP_ENV=dev
    APP_SECRET=0c15b00ac6370aa12e08a36e4c4e5ef7
    ###< symfony/framework-bundle ###

    ###> doctrine/doctrine-bundle ###
    # Format described at https://www.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#connecting-using-a-url
    # IMPORTANT: You MUST configure your server version, either here or in config/packages/doctrine.yaml
    #
    # DATABASE_URL="sqlite:///%kernel.project_dir%/var/data.db"
    DATABASE_URL="mysql://root:@127.0.0.1:3306/symfony_task_learn?serverVersion=8&charset=utf8mb4"
    # DATABASE_URL="postgresql://app:!ChangeMe!@127.0.0.1:5432/app?serverVersion=14&charset=utf8"
    ###< doctrine/doctrine-bundle ###

    ###> symfony/messenger ###
    # Choose one of the transports below
    # MESSENGER_TRANSPORT_DSN=doctrine://default
    # MESSENGER_TRANSPORT_DSN=amqp://guest:guest@localhost:5672/%2f/messages
    # MESSENGER_TRANSPORT_DSN=redis://localhost:6379/messages
    ###< symfony/messenger ###

    ###> symfony/mailer ###
    MAILER_DSN=smtp://6c40b325c9a698:53a66737d4e53f@smtp.mailtrap.io:2525?encryption=tls&auth_mode=login
    ###< symfony/mailer ###

    # Declaramos el método y las dos claves secretas que queramos:
    HASH_METHOD="AES-256-CBC"
    START_KEY="fv83729"
    END_KEY="89s67s"


- Ahora vamos a editar el controlador **UserController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    use Symfony\Component\HttpFoundation\Request;
    use Doctrine\ORM\EntityManagerInterface;
    use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
    use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
    use Symfony\Component\String\Slugger\SluggerInterface;
    use Symfony\Component\HttpFoundation\File\Exception\FileException;
    use Symfony\Component\HttpFoundation\File\UploadedFile;
    // cargamos el componente mailerinterface:
    use Symfony\Component\Mailer\MailerInterface;
    // cargamos también el mime email
    use Symfony\Component\Mime\Email;

    use App\Entity\User;
    use App\Form\UserType;

    class UserController extends AbstractController
    {   
        public function login(AuthenticationUtils $authenticationUtils): Response 
        {   
            $error = $authenticationUtils->getLastAuthenticationError();
            $lastUsername = $authenticationUtils->getLastUsername();

            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 
            
            return $this->render('user/login.html.twig', [
                'registration_form' => $registrationForm->createView(),
                'last_username' => $lastUsername, 
                'error' => $error
            ]);
        }

        public function logout(): void {}
        
        public function register(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher): Response
        {   
            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 

            $registrationForm->handleRequest($request);
            if($registrationForm->isSubmitted()){
                if($registrationForm->isValid()){
                    $user->setRoles(['ROLE_USER']);
                    $plainPassword = $registrationForm->get('password')->getData();
                    $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                    $user->setPassword($hashedPassword);

                    $doctrine->persist($user);
                    $doctrine->flush();
                    return $this->redirectToRoute('login');
                }
            }
        }

        public function profile(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher,
            SluggerInterface $slugger 
        ): Response
        {
            $user = $this->getUser();
            $isAvatar = $user->getAvatar();
            $username = $user->getName();

            if($isAvatar){
                $avatar = './uploads/avatars/' . $user->getAvatar();
            }else{
                $avatar = './assets/images/avatar.png';
            }

            $oldPassword = $user->getPassword();
            $userEditForm = $this->createForm(UserType::class, $user); 
            
            $userEditForm->handleRequest($request);
            
            if($userEditForm->isSubmitted()){
                if($userEditForm->isValid()){
                    $file = $userEditForm->get('avatar')->getData();
                    if($file){
                        $originalFilename = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME);
                        $safeFilename = $slugger->slug($originalFilename);
                        $newFilename = $safeFilename . '-' . uniqid() . '.' . $file->guessExtension();
                        try{
                            $file->move(
                                $this->getParameter('avatars'), 
                                $newFilename
                            );
                        }catch(FileException $e){
                            // ignoramos el error y seguimos adelante
                        }

                        $user->setAvatar($newFilename);
                    }else{ 
                        $user->setAvatar($isAvatar);
                    }

                    $plainPassword = $userEditForm->get('password')->getData();
                    if($plainPassword){
                        $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                        $user->setPassword($hashedPassword);
                    }else{
                        $user->setPassword($oldPassword);
                    }

                    $doctrine->flush();
                    return $this->redirectToRoute('profile');
                }
            }

            return $this->render('user/profile.html.twig', [
                'user_edit_form' => $userEditForm->createView(),
                'avatar' => $avatar, 
                'username' => $username 
            ]);
        }

        // Creamos un controlador nuevo y le pasamos la interfaz de mailer:
        public function send_reset_email(
            Request $request, 
            EntityManagerInterface $doctrine, 
            MailerInterface $mailer){
            // recuperamos el email de la request:
            $email = $request->get('reset_email');
            // recuperamos el usuario de la base de datos:
            $user = $doctrine->getRepository(User::class)->findOneBy(['email' => $email]);
            // si existe el usuario enviaremos el email:
            
            if($user){
            
                // codificamos el id del usuario:
                $prefix = hash('sha256', $_ENV['START_KEY']);
                $sufix = substr(hash('sha256', $_ENV['END_KEY']), 0, 16);
                $hashId = openssl_encrypt($user->getId(), $_ENV['HASH_METHOD'], $prefix, 0, $sufix);

                // creamos una ruta con el id del usuario en un md5: 
                $urlSource = "http://localhost:5000/reset_password/" . md5($user->getId());
                echo var_dump($urlSource);
                // Construimos el email:
                $emailToSend = (new Email())
                                ->from('pytonicus@gmail.com')
                                ->to($email)
                                ->subject('ASUNTO: Recuperar contraseña')
                                ->text('reestablecer contraseña')
                                ->html('<a href="' . $urlSource . '">' . $urlSource . '</a>');
                // enviamos el email:
                $mailer->send($emailToSend);
            }
            
            return $this->redirectToRoute('login');
            /* Este código lo usamos para depurar el correo:
            return new Response(
                '<html><body>TESTING DE EMAIL</body></html>'
            ); */
        }
    }


- Editamos el template **login.html.twig**:

.. code-block:: html 

    {% extends 'base.html.twig' %}

    {% block title %}Hello UserController!{% endblock %}

    {% block body %}

    <div class="bodystyle text-center" cz-shortcut-listen="true">
        <div class="form-signin text-center">
            <h1>Por favor inicia sesión</h1>
            <form action="{{ path('login')}}" method="post">
                <div class="form-floating">
                    <input type="email" id="username" name="_username" value="{{last_username}}" class="form-control" />
                    <label htmlFor="floatingInput">Email</label>
                </div>
                <div class="form-floating">
                    <input type="password" id="password" name="_password" class="form-control" />
                    <label htmlFor="floatingPassword">Contraseña</label>
                </div>
                <div class="mb-3">
                <button type="button" class="cursor" data-bs-toggle="modal" data-bs-target="#registerUser"  data-bs-toggle="modal" data-bs-target="#registerUser">Crear usuario</button>
                </div>
                <div class="mb-3">
                <!-- actualizamos el botón para desplegar el modal si ha olvidado contraseña -->
                <button type="button" class="cursor" data-bs-toggle="modal" data-bs-target="#resetPassword"  data-bs-toggle="modal" data-bs-target="#resetPassword">¿has olvidado la contraseña?</button>
                </div>
                <button class="w-100 btn btn-lg btn-primary" type="submit">Iniciar sesión</button>
            </form>
        </div>
    </div>

    <div class="modal fade" id="registerUser" tabIndex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Registro</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col">
                        <div class="row">
                            <div class="container">
                                <form id="userForm" action="{{path('register')}}" method="post" role="form" class="container">
                                    {{ form_row(registration_form._token) }}

                                    {{ form_label(registration_form.email, 'email', {'label_attr': {'style': 'display:none'}}) }}
                                    {{ form_widget(registration_form.email, {'attr': {'class': 'form-control mt-3', 'placeholder':'Email'}}) }}
                                    {{ form_errors(registration_form.email) }}
                                    
                                    {{ form_label(registration_form.password, 'password', {'label_attr': {'style': 'display:none'}}) }}
                                    {{ form_widget(registration_form.password, {'attr':{'class': 'form-control mt-3', 'placeholder': 'Contraseña', 'type':'password'}}) }}
                                    {{ form_errors(registration_form.password, {'attr': {'class': 'col-md-3'}}) }}
                                    
                                    <input type="submit" class="btn btn-success form-control mt-3" value="Darse de alta" />
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            </div>
        </div>
    </div>

    <!-- modal para recuperar contraseña -->
    <div class="modal fade" id="resetPassword" tabIndex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Resetear contraseña</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col text-center">
                        <form action="{{path('send_reset_email')}}" method="post" role="form">
                            <input type="email" name="reset_email" class="form-control mt-3" placeholder="Email" />  
                            <input type="submit"  class="btn btn-success form-control mt-3" value="Enviar email" data-bs-dismiss="modal" />
                            <small>Recibirás un email que te llevará donde resetear tu contraseña</small>
                        </form>
                    </div>
                </div>
            </div>
            </div>
        </div>
    </div>

    {% endblock %}


- Y finalmente las rutas **routes.yaml**:

.. code-block:: yaml

    index:
        path: /
        controller: App\Controller\TaskController::index

    finish:
        path: /tasks/finish/{id}
        controller: App\Controller\TaskController::finish

    delete:
        path: /tasks/delete/{id}
        controller: App\Controller\TaskController::delete

    update:
        path: /tasks/update/{id}
        controller: App\Controller\TaskController::update

    login: 
        path: /login
        controller: App\Controller\UserController::login

    logout:
        path: /logout
        controller: App\Controller\UserController::logout

    register: 
        path: /register
        controller: App\Controller\UserController::register

    profile:
        path: /profile
        controller: App\Controller\UserController::profile

    # creamos una ruta para resetear contraseña:
    send_reset_email:
        path: /send_reset_email
        controller: App\Controller\UserController::send_reset_email

- Este correo nos manda un enlace para restaurar contraseña que crearemos en el siguiente paso

Paso 13: Recuperar contraseña (pagina de recuperación)
******************************************************

- Crear un nuevo formulario: ``php bin/console make:form Reset``
- Editar el nuevo formulario **ResetType.php**:

.. code-block:: php 

    <?php

    namespace App\Form;

    use Symfony\Component\Form\AbstractType;
    use Symfony\Component\Form\FormBuilderInterface;
    use Symfony\Component\OptionsResolver\OptionsResolver;
    // añadimos el tipo password y repeated para repetir la contraseña:
    use Symfony\Component\Form\Extension\Core\Type\PasswordType;
    use Symfony\Component\Form\Extension\Core\Type\RepeatedType;

    class ResetType extends AbstractType
    {
        public function buildForm(FormBuilderInterface $builder, array $options): void
        {
            $builder
                // añadimos el campo para resetear el password:
                ->add('password', RepeatedType::class, array(
                    'type' => PasswordType::class,
                    'invalid_message' => 'Las contraseñas no coinciden',
                    'required' => false,
                    'empty_data' => '',
                    'first_options'  => array('label' => 'Nueva contraseña'),
                    'second_options' => array('label' => 'Repetir contraseña'),
                ))
            ;
        }

        public function configureOptions(OptionsResolver $resolver): void
        {
            $resolver->setDefaults([
                // Configure your form options here
            ]);
        }
    }


- Añadimos un nuevo método para el controlador **UserController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    use Symfony\Component\HttpFoundation\Request;
    use Doctrine\ORM\EntityManagerInterface;
    use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
    use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
    use Symfony\Component\String\Slugger\SluggerInterface;
    use Symfony\Component\HttpFoundation\File\Exception\FileException;
    use Symfony\Component\HttpFoundation\File\UploadedFile;
    use Symfony\Component\Mailer\MailerInterface;
    use Symfony\Component\Mime\Email;

    use App\Entity\User;
    use App\Form\UserType;
    // importamos el nuevo fomrulario:
    use App\Form\ResetType;

    class UserController extends AbstractController
    {   
        public function login(AuthenticationUtils $authenticationUtils): Response 
        {   
            $error = $authenticationUtils->getLastAuthenticationError();
            $lastUsername = $authenticationUtils->getLastUsername();

            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 
            
            return $this->render('user/login.html.twig', [
                'registration_form' => $registrationForm->createView(),
                'last_username' => $lastUsername, 
                'error' => $error
            ]);
        }

        public function logout(): void {}
        
        public function register(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher): Response
        {   
            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 

            $registrationForm->handleRequest($request);
            if($registrationForm->isSubmitted()){
                if($registrationForm->isValid()){
                    $user->setRoles(['ROLE_USER']);
                    $plainPassword = $registrationForm->get('password')->getData();
                    $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                    $user->setPassword($hashedPassword);

                    $doctrine->persist($user);
                    $doctrine->flush();
                    return $this->redirectToRoute('login');
                }
            }
        }

        public function profile(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher,
            SluggerInterface $slugger 
        ): Response
        {
            $user = $this->getUser();
            $isAvatar = $user->getAvatar();
            $username = $user->getName();

            if($isAvatar){
                $avatar = './uploads/avatars/' . $user->getAvatar();
            }else{
                $avatar = './assets/images/avatar.png';
            }

            $oldPassword = $user->getPassword();
            $userEditForm = $this->createForm(UserType::class, $user); 
            
            $userEditForm->handleRequest($request);
            
            if($userEditForm->isSubmitted()){
                if($userEditForm->isValid()){
                    $file = $userEditForm->get('avatar')->getData();
                    if($file){
                        $originalFilename = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME);
                        $safeFilename = $slugger->slug($originalFilename);
                        $newFilename = $safeFilename . '-' . uniqid() . '.' . $file->guessExtension();
                        try{
                            $file->move(
                                $this->getParameter('avatars'), 
                                $newFilename
                            );
                        }catch(FileException $e){
                            // ignoramos el error y seguimos adelante
                        }

                        $user->setAvatar($newFilename);
                    }else{ 
                        $user->setAvatar($isAvatar);
                    }

                    $plainPassword = $userEditForm->get('password')->getData();
                    if($plainPassword){
                        $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                        $user->setPassword($hashedPassword);
                    }else{
                        $user->setPassword($oldPassword);
                    }

                    $doctrine->flush();
                    return $this->redirectToRoute('profile');
                }
            }

            return $this->render('user/profile.html.twig', [
                'user_edit_form' => $userEditForm->createView(),
                'avatar' => $avatar, 
                'username' => $username 
            ]);
        }

        public function send_reset_email(
            Request $request, 
            EntityManagerInterface $doctrine, 
            MailerInterface $mailer){
            $email = $request->get('reset_email');
            $user = $doctrine->getRepository(User::class)->findOneBy(['email' => $email]);
            
            if($user){
                // codificamos el id del usuario:
                $prefix = hash('sha256', $_ENV['START_KEY']);
                $sufix = substr(hash('sha256', $_ENV['END_KEY']), 0, 16);
                $hashId = openssl_encrypt($user->getId(), $_ENV['HASH_METHOD'], $prefix, 0, $sufix);

                $urlSource = "http://localhost:5000/reset_password/" . base64_encode($hashId);
                echo var_dump($urlSource);

                $emailToSend = (new Email())
                                ->from('pytonicus@gmail.com')
                                ->to($email)
                                ->subject('ASUNTO: Recuperar contraseña')
                                ->text('reestablecer contraseña')
                                ->html('<a href="' . $urlSource . '">' . $urlSource . '</a>');
                $mailer->send($emailToSend);
            }
            
            return $this->redirectToRoute('login');
            /* Este código lo usamos para depurar el correo:
            return new Response(
                '<html><body>TESTING DE EMAIL</body></html>'
            ); */
        }

        // metodo para resetear la contraseña:
        public function reset_password(
            $hashId,
            Request $request,
            EntityManagerInterface $doctrine,
            UserPasswordHasherInterface $passwordHasher
            )
        {
            // descodificamos el id del usuario:
            $prefix = hash('sha256', $_ENV['START_KEY']);
            $sufix = substr(hash('sha256', $_ENV['END_KEY']), 0, 16);
            $id = openssl_decrypt(base64_decode($hashId), $_ENV['HASH_METHOD'], $prefix, 0, $sufix);
            
            // recuperamos el usuario mediante el id descifrado:
            $user = $doctrine->getRepository(User::class)->findOneBy(['id' => $id]);
            // si existe un usuario vamos a crear un formulario:
            if($user){
                // creamos un formulario para resetear password:
                $newPasswordForm = $this->createForm(ResetType::class); 
                // recuperamos la request en cuanto se reciba la nueva contraseña:
                $newPasswordForm->handleRequest($request);
            
                if($newPasswordForm->isSubmitted()){
                    if($newPasswordForm->isValid()){               
                        $plainPassword = $newPasswordForm['password']['first'];
                        if($plainPassword){
                            // obtenemos la data del password correcto y lo codificamos:
                            $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword->getData());
                            $user->setPassword($hashedPassword);
                        }else{
                            $user->setPassword($oldPassword);
                        }
                        // guardamos y redireccionamos a login:
                        $doctrine->flush();
                        return $this->redirectToRoute('login');
                    }
                }
            }else{
                // si por un casual el usuario no existe hacemos redirección a login:
                return $this->redirectToRoute('login'); 
            }

            return $this->render('user/reset_password.html.twig', [
                'new_password_form' => $newPasswordForm->createView(),
            ]);
        }
    }

- Creamos una nueva plantilla en **user** llamada **reset_password.html.twig**:

.. code-block:: html 

    {% extends 'base.html.twig' %}

    {% block title %}Hello UserController!{% endblock %}

    {% block body %}

    <div class="bodystyle text-center" cz-shortcut-listen="true">
        <div class="form-signin text-center">
            <h1>Restablecer contraseña</h1>
            <form action="" method="post"> 
            {{ form_row(new_password_form._token) }}
                <div class="form-floating">
                    {{ form_label(new_password_form.password.first) }}
                    {{ form_widget(new_password_form.password.first, {'attr': {'class': 'form-control', 'placeholder':'Nueva contraseña'}}) }}
                    {{ form_errors(new_password_form.password.first) }}
                </div>
                <div class="form-floating">
                    {{ form_label(new_password_form.password.second, ) }}
                    {{ form_widget(new_password_form.password.second, {'attr': {'class': 'form-control', 'placeholder':'Repetir nueva contraseña'}}) }}
                    {{ form_errors(new_password_form.password.second) }}
                </div>
                <button class="w-100 btn btn-lg btn-secondary" type="submit">Cambiar contraseña</button>
            </form>
        </div>
    </div>

    {% endblock %}

- Y finalmente asignamos la nueva ruta a **routes.yaml**:

.. code-block:: yaml 

    index:
        path: /
        controller: App\Controller\TaskController::index

    finish:
        path: /tasks/finish/{id}
        controller: App\Controller\TaskController::finish

    delete:
        path: /tasks/delete/{id}
        controller: App\Controller\TaskController::delete

    update:
        path: /tasks/update/{id}
        controller: App\Controller\TaskController::update

    login: 
        path: /login
        controller: App\Controller\UserController::login

    logout:
        path: /logout
        controller: App\Controller\UserController::logout

    register: 
        path: /register
        controller: App\Controller\UserController::register

    profile:
        path: /profile
        controller: App\Controller\UserController::profile

    send_reset_email:
        path: /send_reset_email
        controller: App\Controller\UserController::send_reset_email

    # ruta para resetear contraseña:
    reset_password:
        path: /reset_password/{hashId}
        controller: App\Controller\UserController::reset_password

Paso 14: Crear alertas
**********************

- Vamos a comenzar por las alertas del login. Editamos **UserController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    use Symfony\Component\HttpFoundation\Request;
    use Doctrine\ORM\EntityManagerInterface;
    use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
    use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
    use Symfony\Component\String\Slugger\SluggerInterface;
    use Symfony\Component\HttpFoundation\File\Exception\FileException;
    use Symfony\Component\HttpFoundation\File\UploadedFile;
    use Symfony\Component\Mailer\MailerInterface;
    use Symfony\Component\Mime\Email;

    use App\Entity\User;
    use App\Form\UserType;
    use App\Form\ResetType;

    class UserController extends AbstractController
    {   
        public function login(AuthenticationUtils $authenticationUtils): Response 
        {   
            $error = $authenticationUtils->getLastAuthenticationError();
            $lastUsername = $authenticationUtils->getLastUsername();

            // creamos un array con los datos del alert a mostrar
            $alert = array(
                'show' => '',
                'status' => '',
                'message' => ''
            );
            // comprobar si existe error de autenticación y lanzarlo:
            if($error){
                $alert = array(
                    'show' => 'show',
                    'status' => 'alert-warning',
                    'message' => 'Error de autentiación, usuario o contraseñas incorrectos'
                );
            }

            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 
            
            return $this->render('user/login.html.twig', [
                'registration_form' => $registrationForm->createView(),
                'last_username' => $lastUsername, 
                'error' => $error,
                'alert' => $alert // renderizamos en twig el alert
            ]);
        }

        public function logout(): void {}
        
        public function register(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher): Response
        {   
            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 

            $registrationForm->handleRequest($request);
            if($registrationForm->isSubmitted()){
                if($registrationForm->isValid()){
                    $user->setRoles(['ROLE_USER']);
                    $plainPassword = $registrationForm->get('password')->getData();
                    $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                    $user->setPassword($hashedPassword);

                    $doctrine->persist($user);
                    $doctrine->flush();
                    return $this->redirectToRoute('login');
                }
            }
        }

        public function profile(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher,
            SluggerInterface $slugger 
        ): Response
        {
            $user = $this->getUser();
            $isAvatar = $user->getAvatar();
            $username = $user->getName();

            if($isAvatar){
                $avatar = './uploads/avatars/' . $user->getAvatar();
            }else{
                $avatar = './assets/images/avatar.png';
            }

            $oldPassword = $user->getPassword();
            $userEditForm = $this->createForm(UserType::class, $user); 
            
            $userEditForm->handleRequest($request);
            
            if($userEditForm->isSubmitted()){
                if($userEditForm->isValid()){
                    $file = $userEditForm->get('avatar')->getData();
                    if($file){
                        $originalFilename = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME);
                        $safeFilename = $slugger->slug($originalFilename);
                        $newFilename = $safeFilename . '-' . uniqid() . '.' . $file->guessExtension();
                        try{
                            $file->move(
                                $this->getParameter('avatars'), 
                                $newFilename
                            );
                        }catch(FileException $e){
                            // ignoramos el error y seguimos adelante
                        }

                        $user->setAvatar($newFilename);
                    }else{ 
                        $user->setAvatar($isAvatar);
                    }

                    $plainPassword = $userEditForm->get('password')->getData();
                    if($plainPassword){
                        $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                        $user->setPassword($hashedPassword);
                    }else{
                        $user->setPassword($oldPassword);
                    }

                    $doctrine->flush();
                    return $this->redirectToRoute('profile');
                }
            }

            return $this->render('user/profile.html.twig', [
                'user_edit_form' => $userEditForm->createView(),
                'avatar' => $avatar, 
                'username' => $username 
            ]);
        }

        public function send_reset_email(
            Request $request, 
            EntityManagerInterface $doctrine, 
            MailerInterface $mailer){
            $email = $request->get('reset_email');
            $user = $doctrine->getRepository(User::class)->findOneBy(['email' => $email]);
            
            if($user){
                $prefix = hash('sha256', $_ENV['START_KEY']);
                $sufix = substr(hash('sha256', $_ENV['END_KEY']), 0, 16);
                $hashId = openssl_encrypt($user->getId(), $_ENV['HASH_METHOD'], $prefix, 0, $sufix);

                $urlSource = "http://localhost:5000/reset_password/" . base64_encode($hashId);
                echo var_dump($urlSource);

                $emailToSend = (new Email())
                                ->from('pytonicus@gmail.com')
                                ->to($email)
                                ->subject('ASUNTO: Recuperar contraseña')
                                ->text('reestablecer contraseña')
                                ->html('<a href="' . $urlSource . '">' . $urlSource . '</a>');
                $mailer->send($emailToSend);
            }
            
            return $this->redirectToRoute('login');
            /* Este código lo usamos para depurar el correo:
            return new Response(
                '<html><body>TESTING DE EMAIL</body></html>'
            ); */
        }

        public function reset_password(
            $hashId,
            Request $request,
            EntityManagerInterface $doctrine,
            UserPasswordHasherInterface $passwordHasher
            )
        {
            $prefix = hash('sha256', $_ENV['START_KEY']);
            $sufix = substr(hash('sha256', $_ENV['END_KEY']), 0, 16);
            $id = openssl_decrypt(base64_decode($hashId), $_ENV['HASH_METHOD'], $prefix, 0, $sufix);
            
            $user = $doctrine->getRepository(User::class)->findOneBy(['id' => $id]);
            if($user){
                $newPasswordForm = $this->createForm(ResetType::class); 
                $newPasswordForm->handleRequest($request);
            
                if($newPasswordForm->isSubmitted()){
                    if($newPasswordForm->isValid()){               
                        $plainPassword = $newPasswordForm['password']['first'];
                        if($plainPassword){
                            $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword->getData());
                            $user->setPassword($hashedPassword);
                        }else{
                            $user->setPassword($oldPassword);
                        }
                        $doctrine->flush();
                        return $this->redirectToRoute('login');
                    }
                }
            }else{
                return $this->redirectToRoute('login'); 
            }

            return $this->render('user/reset_password.html.twig', [
                'new_password_form' => $newPasswordForm->createView(),
            ]);
        }
    }

- Implementamos el alert en la plantilla twig **login.html.twig**:

.. code-block:: html

    {% extends 'base.html.twig' %}

    {% block title %}Hello UserController!{% endblock %}

    {% block body %}

    <div class=" bodystyle text-center" cz-shortcut-listen="true">
        <!-- Creamos un alert para avisar de cada estado y le pasamos los datos del array -->
        <div class="alert-group alert {{alert['status']}} alert-dismissible fade {{alert['show']}}" role="alert">
            {{alert['message']}}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>

        <div class="form-signin text-center">
            <h1>Por favor inicia sesión</h1>
            <form action="{{ path('login')}}" method="post">
                <div class="form-floating">
                    <input type="email" id="username" name="_username" value="{{last_username}}" class="form-control" />
                    <label htmlFor="floatingInput">Email</label>
                </div>
                <div class="form-floating">
                    <input type="password" id="password" name="_password" class="form-control" />
                    <label htmlFor="floatingPassword">Contraseña</label>
                </div>
                <div class="mb-3">
                <button type="button" class="cursor" data-bs-toggle="modal" data-bs-target="#registerUser"  data-bs-toggle="modal" data-bs-target="#registerUser">Crear usuario</button>
                </div>
                <div class="mb-3">
                <!-- actualizamos el botón para desplegar el modal si ha olvidado contraseña -->
                <button type="button" class="cursor" data-bs-toggle="modal" data-bs-target="#resetPassword"  data-bs-toggle="modal" data-bs-target="#resetPassword">¿has olvidado la contraseña?</button>
                </div>
                <button class="w-100 btn btn-lg btn-primary" type="submit">Iniciar sesión</button>
            </form>
        </div>
    </div>

    <div class="modal fade" id="registerUser" tabIndex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Registro</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col">
                        <div class="row">
                            <div class="container">
                                <form id="userForm" action="{{path('register')}}" method="post" role="form" class="container">
                                    {{ form_row(registration_form._token) }}

                                    {{ form_label(registration_form.email, 'email', {'label_attr': {'style': 'display:none'}}) }}
                                    {{ form_widget(registration_form.email, {'attr': {'class': 'form-control mt-3', 'placeholder':'Email'}}) }}
                                    {{ form_errors(registration_form.email) }}
                                    
                                    {{ form_label(registration_form.password, 'password', {'label_attr': {'style': 'display:none'}}) }}
                                    {{ form_widget(registration_form.password, {'attr':{'class': 'form-control mt-3', 'placeholder': 'Contraseña', 'type':'password'}}) }}
                                    {{ form_errors(registration_form.password, {'attr': {'class': 'col-md-3'}}) }}
                                    
                                    <input type="submit" class="btn btn-success form-control mt-3" value="Darse de alta" />
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            </div>
        </div>
    </div>

    <!-- modal para recuperar contraseña -->
    <div class="modal fade" id="resetPassword" tabIndex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Resetear contraseña</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col text-center">
                        <form action="{{path('send_reset_email')}}" method="post" role="form">
                            <input type="email" name="reset_email" class="form-control mt-3" placeholder="Email" />  
                            <input type="submit"  class="btn btn-success form-control mt-3" value="Enviar email" data-bs-dismiss="modal" />
                            <small>Recibirás un email que te llevará donde resetear tu contraseña</small>
                        </form>
                    </div>
                </div>
            </div>
            </div>
        </div>
    </div>

    {% endblock %}

- Añadimos el siguiente estilo al final de la hoja **base.css**:

.. code-block:: css 

    .alert-group{
        position:fixed;
        top: 0;
        width: 100%;
    }

- Ahora cuando vayamos a iniciar sesión con un usuario o contraseña incorrecto nos avisará.

- Seguimos con la creación de un nuevo usuario, volvemos a editar la parte de registro en **UserController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    use Symfony\Component\HttpFoundation\Request;
    use Doctrine\ORM\EntityManagerInterface;
    use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
    use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
    use Symfony\Component\String\Slugger\SluggerInterface;
    use Symfony\Component\HttpFoundation\File\Exception\FileException;
    use Symfony\Component\HttpFoundation\File\UploadedFile;
    use Symfony\Component\Mailer\MailerInterface;
    use Symfony\Component\Mime\Email;

    use App\Entity\User;
    use App\Form\UserType;
    use App\Form\ResetType;

    class UserController extends AbstractController
    {   
        public function login(AuthenticationUtils $authenticationUtils, Request $request): Response 
        {   
            $error = $authenticationUtils->getLastAuthenticationError();
            $lastUsername = $authenticationUtils->getLastUsername();

            // en la alerta actual recogemos cualquier parametro recibido si existe de redirecciones como login:
            $alert = array(
                'show' => $request->query->get("show") ? $request->query->get("show") : '',
                'status' => $request->query->get("status") ? $request->query->get("status") : '',
                'message' => $request->query->get("message") ? $request->query->get("message") : ''
            );

            if($error){
                $alert = array(
                    'show' => 'show',
                    'status' => 'alert-warning',
                    'message' => 'Error de autentiación, usuario o contraseñas incorrectos'
                );
            }

            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 
            
            return $this->render('user/login.html.twig', [
                'registration_form' => $registrationForm->createView(),
                'last_username' => $lastUsername, 
                'error' => $error,
                'alert' => $alert // renderizamos en twig el alert
            ]);
        }

        public function logout(): void {}
        
        public function register(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher): Response
        {   
            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 

            $registrationForm->handleRequest($request);
            if($registrationForm->isSubmitted()){
                // vamos a comprobar si existe el usuario:
                $email = $registrationForm->get('email')->getData();
                $emailExists = $doctrine->getRepository(User::class)->findOneBy(['email' => $email]);
                if($emailExists){
                    // redireccionamos a login y lanzamos una alerta de error en caso de que exista:
                    $alert = array(
                        'show' => 'show',
                        'status' => 'alert-danger',
                        'message' => 'El email ya se encuentra registrado.'
                    );
                    return $this->redirectToRoute('login', $alert);
                }

                if($registrationForm->isValid()){
                    $user->setRoles(['ROLE_USER']);
                    $plainPassword = $registrationForm->get('password')->getData();
                    $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                    $user->setPassword($hashedPassword);

                    $doctrine->persist($user);
                    $doctrine->flush();
                    // definimos la alerta que llegará en caso de que funcione o no el registro:
                    $alert = array(
                        'show' => 'show',
                        'status' => 'alert-success',
                        'message' => 'Usuario registrado con éxito. Ya puede iniciar sesión.'
                    );
                    // enviamos por parametros los datos del alert:
                    return $this->redirectToRoute('login', $alert);
                }
            }
        }

        public function profile(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher,
            SluggerInterface $slugger 
        ): Response
        {
            $user = $this->getUser();
            $isAvatar = $user->getAvatar();
            $username = $user->getName();

            if($isAvatar){
                $avatar = './uploads/avatars/' . $user->getAvatar();
            }else{
                $avatar = './assets/images/avatar.png';
            }

            $oldPassword = $user->getPassword();
            $userEditForm = $this->createForm(UserType::class, $user); 
            
            $userEditForm->handleRequest($request);
            
            if($userEditForm->isSubmitted()){
                if($userEditForm->isValid()){
                    $file = $userEditForm->get('avatar')->getData();
                    if($file){
                        $originalFilename = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME);
                        $safeFilename = $slugger->slug($originalFilename);
                        $newFilename = $safeFilename . '-' . uniqid() . '.' . $file->guessExtension();
                        try{
                            $file->move(
                                $this->getParameter('avatars'), 
                                $newFilename
                            );
                        }catch(FileException $e){
                            // ignoramos el error y seguimos adelante
                        }

                        $user->setAvatar($newFilename);
                    }else{ 
                        $user->setAvatar($isAvatar);
                    }

                    $plainPassword = $userEditForm->get('password')->getData();
                    if($plainPassword){
                        $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                        $user->setPassword($hashedPassword);
                    }else{
                        $user->setPassword($oldPassword);
                    }

                    $doctrine->flush();

                    return $this->redirectToRoute('profile');
                }
            }

            return $this->render('user/profile.html.twig', [
                'user_edit_form' => $userEditForm->createView(),
                'avatar' => $avatar, 
                'username' => $username 
            ]);
        }

        public function send_reset_email(
            Request $request, 
            EntityManagerInterface $doctrine, 
            MailerInterface $mailer){
            $email = $request->get('reset_email');
            $user = $doctrine->getRepository(User::class)->findOneBy(['email' => $email]);
            
            if($user){
                $prefix = hash('sha256', $_ENV['START_KEY']);
                $sufix = substr(hash('sha256', $_ENV['END_KEY']), 0, 16);
                $hashId = openssl_encrypt($user->getId(), $_ENV['HASH_METHOD'], $prefix, 0, $sufix);

                $urlSource = "http://localhost:5000/reset_password/" . base64_encode($hashId);
                echo var_dump($urlSource);

                $emailToSend = (new Email())
                                ->from('pytonicus@gmail.com')
                                ->to($email)
                                ->subject('ASUNTO: Recuperar contraseña')
                                ->text('reestablecer contraseña')
                                ->html('<a href="' . $urlSource . '">' . $urlSource . '</a>');
                $mailer->send($emailToSend);
            }
            
            return $this->redirectToRoute('login');
            /* Este código lo usamos para depurar el correo:
            return new Response(
                '<html><body>TESTING DE EMAIL</body></html>'
            ); */
        }

        public function reset_password(
            $hashId,
            Request $request,
            EntityManagerInterface $doctrine,
            UserPasswordHasherInterface $passwordHasher
            )
        {
            $prefix = hash('sha256', $_ENV['START_KEY']);
            $sufix = substr(hash('sha256', $_ENV['END_KEY']), 0, 16);
            $id = openssl_decrypt(base64_decode($hashId), $_ENV['HASH_METHOD'], $prefix, 0, $sufix);
            
            $user = $doctrine->getRepository(User::class)->findOneBy(['id' => $id]);
            if($user){
                $newPasswordForm = $this->createForm(ResetType::class); 
                $newPasswordForm->handleRequest($request);
            
                if($newPasswordForm->isSubmitted()){
                    if($newPasswordForm->isValid()){               
                        $plainPassword = $newPasswordForm['password']['first'];
                        if($plainPassword){
                            $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword->getData());
                            $user->setPassword($hashedPassword);
                        }else{
                            $user->setPassword($oldPassword);
                        }
                        $doctrine->flush();
                        return $this->redirectToRoute('login');
                    }
                }
            }else{
                return $this->redirectToRoute('login'); 
            }

            return $this->render('user/reset_password.html.twig', [
                'new_password_form' => $newPasswordForm->createView(),
            ]);
        }
    }

- Ya sabiendo como funcionan login y register podemos editar el resto de **UserController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    use Symfony\Component\HttpFoundation\Request;
    use Doctrine\ORM\EntityManagerInterface;
    use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
    use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
    use Symfony\Component\String\Slugger\SluggerInterface;
    use Symfony\Component\HttpFoundation\File\Exception\FileException;
    use Symfony\Component\HttpFoundation\File\UploadedFile;
    use Symfony\Component\Mailer\MailerInterface;
    use Symfony\Component\Mime\Email;

    use App\Entity\User;
    use App\Form\UserType;
    use App\Form\ResetType;

    class UserController extends AbstractController
    {   
        public function login(AuthenticationUtils $authenticationUtils, Request $request): Response 
        {   
            $error = $authenticationUtils->getLastAuthenticationError();
            $lastUsername = $authenticationUtils->getLastUsername();

            $alert = array(
                'show' => $request->query->get("show") ? $request->query->get("show") : '',
                'status' => $request->query->get("status") ? $request->query->get("status") : '',
                'message' => $request->query->get("message") ? $request->query->get("message") : ''
            );

            if($error){
                $alert = array(
                    'show' => 'show',
                    'status' => 'alert-warning',
                    'message' => 'Error de autentiación, usuario o contraseñas incorrectos'
                );
            }

            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 
            
            return $this->render('user/login.html.twig', [
                'registration_form' => $registrationForm->createView(),
                'last_username' => $lastUsername, 
                'error' => $error,
                'alert' => $alert 
            ]);
        }

        public function logout(): void {}
        
        public function register(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher): Response
        {   
            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 

            $registrationForm->handleRequest($request);
            if($registrationForm->isSubmitted()){
                $email = $registrationForm->get('email')->getData();
                $emailExists = $doctrine->getRepository(User::class)->findOneBy(['email' => $email]);
                if($emailExists){
                    $alert = array(
                        'show' => 'show',
                        'status' => 'alert-danger',
                        'message' => 'El email ya se encuentra registrado.'
                    );
                    return $this->redirectToRoute('login', $alert);
                }

                if($registrationForm->isValid()){
                    $user->setRoles(['ROLE_USER']);
                    $plainPassword = $registrationForm->get('password')->getData();
                    $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                    $user->setPassword($hashedPassword);

                    $doctrine->persist($user);
                    $doctrine->flush();
                    $alert = array(
                        'show' => 'show',
                        'status' => 'alert-success',
                        'message' => 'Usuario registrado con éxito. Ya puede iniciar sesión.'
                    );
                    return $this->redirectToRoute('login', $alert);
                }
            }
        }

        public function profile(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher,
            SluggerInterface $slugger 
        ): Response
        {
            $user = $this->getUser();
            $isAvatar = $user->getAvatar();
            $username = $user->getName();

            // cargamos los datos para el alert con parámetros a recibir:
            $alert = array(
                'show' => $request->query->get("show") ? $request->query->get("show") : '',
                'status' => $request->query->get("status") ? $request->query->get("status") : '',
                'message' => $request->query->get("message") ? $request->query->get("message") : ''
            );

            if($isAvatar){
                $avatar = './uploads/avatars/' . $user->getAvatar();
            }else{
                $avatar = './assets/images/avatar.png';
            }

            $oldPassword = $user->getPassword();
            $userEditForm = $this->createForm(UserType::class, $user); 
            
            $userEditForm->handleRequest($request);
            
            if($userEditForm->isSubmitted()){
                if($userEditForm->isValid()){
                    $file = $userEditForm->get('avatar')->getData();
                    if($file){
                        $originalFilename = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME);
                        $safeFilename = $slugger->slug($originalFilename);
                        $newFilename = $safeFilename . '-' . uniqid() . '.' . $file->guessExtension();
                        try{
                            $file->move(
                                $this->getParameter('avatars'), 
                                $newFilename
                            );
                        }catch(FileException $e){
                            // ignoramos el error y seguimos adelante
                        }

                        $user->setAvatar($newFilename);
                    }else{ 
                        $user->setAvatar($isAvatar);
                    }

                    $plainPassword = $userEditForm->get('password')->getData();
                    if($plainPassword){
                        $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                        $user->setPassword($hashedPassword);
                    }else{
                        $user->setPassword($oldPassword);
                    }

                    $doctrine->flush();

                    // al actualizar los datos lanzamos un mensaje de aviso:
                    $alert = array(
                        'show' => 'show',
                        'status' => 'alert-success',
                        'message' => 'Usuario actualizado con éxito.'
                    );

                    return $this->redirectToRoute('profile', $alert);
                }
            }

            return $this->render('user/profile.html.twig', [
                'user_edit_form' => $userEditForm->createView(),
                'avatar' => $avatar, 
                'username' => $username,
                'alert' => $alert // recuerda cargar en twig el alert
            ]);
        }

        public function send_reset_email(
            Request $request, 
            EntityManagerInterface $doctrine, 
            MailerInterface $mailer){
            $email = $request->get('reset_email');
            $user = $doctrine->getRepository(User::class)->findOneBy(['email' => $email]);
            
            if($user){
                $prefix = hash('sha256', $_ENV['START_KEY']);
                $sufix = substr(hash('sha256', $_ENV['END_KEY']), 0, 16);
                $hashId = openssl_encrypt($user->getId(), $_ENV['HASH_METHOD'], $prefix, 0, $sufix);

                $urlSource = "http://localhost:5000/reset_password/" . base64_encode($hashId);
                echo var_dump($urlSource);

                $emailToSend = (new Email())
                                ->from('pytonicus@gmail.com')
                                ->to($email)
                                ->subject('ASUNTO: Recuperar contraseña')
                                ->text('reestablecer contraseña')
                                ->html('<a href="' . $urlSource . '">' . $urlSource . '</a>');
                $mailer->send($emailToSend);

                
                // se envía el mensaje de que todo ha salido bien:
                $alert = array(
                    'show' => 'show',
                    'status' => 'alert-success',
                    'message' => 'Se ha enviado un email con un enlace para restablecer contraseña.'
                );
                
            }else{
                // se envía el mensaje de que no existe el email en la base de datos
                $alert = array(
                    'show' => 'show',
                    'status' => 'alert-warning',
                    'message' => 'El email no se encuentra registrado en el sistema.'
                );
            }

            // cargamos el alert:
            return $this->redirectToRoute('login', $alert);
            /* Este código lo usamos para depurar el correo:
            return new Response(
                '<html><body>TESTING DE EMAIL</body></html>'
            ); */
        }

        public function reset_password(
            $hashId,
            Request $request,
            EntityManagerInterface $doctrine,
            UserPasswordHasherInterface $passwordHasher
            )
        {
            $prefix = hash('sha256', $_ENV['START_KEY']);
            $sufix = substr(hash('sha256', $_ENV['END_KEY']), 0, 16);
            $id = openssl_decrypt(base64_decode($hashId), $_ENV['HASH_METHOD'], $prefix, 0, $sufix);
            
            $user = $doctrine->getRepository(User::class)->findOneBy(['id' => $id]);
            if($user){
                $newPasswordForm = $this->createForm(ResetType::class); 
                $newPasswordForm->handleRequest($request);
            
                if($newPasswordForm->isSubmitted()){
                    if($newPasswordForm->isValid()){               
                        $plainPassword = $newPasswordForm['password']['first'];
                        if($plainPassword){
                            $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword->getData());
                            $user->setPassword($hashedPassword);
                        }else{
                            $user->setPassword($oldPassword);
                        }
                        $doctrine->flush();
                        // se envía el mensaje de que se ha restablecido la contraseña:
                        $alert = array(
                            'show' => 'show',
                            'status' => 'alert-success',
                            'message' => 'La contraseña ha sido reestablecida con éxito, ya puede iniciar sesión.'
                        );
                        // añadimos la alerta:
                        return $this->redirectToRoute('login', $alert);
                    }
                }
            }else{
                // se envía el mensaje de que hubo un error al intentar reestablecer:
                $alert = array(
                    'show' => 'show',
                    'status' => 'alert-danger',
                    'message' => 'Ha habido un error al reestablecer la contraseña, por favor inténtelo de nuevo.'
                );
                // igualmente pasamos el alert:
                return $this->redirectToRoute('login', $alert); 
            }

            return $this->render('user/reset_password.html.twig', [
                'new_password_form' => $newPasswordForm->createView(),
            ]);
        }
    }



- En el caso de profile tendremos que añadir el alert en **profile.html.twig**:

.. code-block:: html 

    {% extends 'base.html.twig' %}

    {% block title %}Perfil de usuario{% endblock %}

    {% block body %}

    <!-- Creamos un alert para avisar de cada estado y le pasamos los datos del array -->
    <div class="alert-group alert {{alert['status']}} alert-dismissible fade {{alert['show']}}" role="alert">
        {{alert['message']}}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>

    <div class="container mt-4 text-center">
                <h3>Datos de usuario</h3>
                <hr />
                <!-- la imagen vamos a cargarla desde controlador -->
                <img src="{{avatar}}" class="avatarEdit rounded img-thumbnail img-fluid"  alt="Avatar" />
                <!-- No olvides poner que el formulario es tipo multipart -->
                <form id="userEditForm" action="" method="post" role="form" enctype='multipart/form-data'>
                    {{ form_row(user_edit_form._token) }}
                    <div class="row">
                        <div class="col-md-12 mt-3">
                            {{ form_label(user_edit_form.avatar, 'avatar', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(user_edit_form.avatar, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder': 'Avatar'}}) }}
                            {{ form_errors(user_edit_form.avatar) }}
                        </div>
                        <div class="col-md-12 mt-3">
                            {{ form_label(user_edit_form.name, 'name', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(user_edit_form.name, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder': 'Nombre'}}) }}
                            {{ form_errors(user_edit_form.name) }}
                        </div>
                        <div class="col-md-12 mt-3">
                            {{ form_label(user_edit_form.lastname, 'lastname', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(user_edit_form.lastname, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder': 'Apellidos'}}) }}
                            {{ form_errors(user_edit_form.lastname) }}
                        </div>
                        <div class="col-md-12 mt-3">
                            {{ form_label(user_edit_form.email, 'email', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(user_edit_form.email, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder': 'Email'}}) }}
                            {{ form_errors(user_edit_form.email) }}
                        </div>
                        <div class="col-md-12 mt-3">
                            {{ form_label(user_edit_form.password, 'password', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(user_edit_form.password, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder': 'Contraseña (dejar en blanco para no cambiar)'}}) }}
                            {{ form_errors(user_edit_form.password) }}
                        </div>
                        <div class="col-md-12 mt-3">            
                            <input type="submit" class="btn btn-success form-control mt-3" value="Actualizar datos" />
                        </div>
                        <div class="col-md-12 mt-3">
                            <a href="{{path('logout')}}">Cerrar sesión</a>
                        </div>
                    </div>
                </form>
    </div>

    {% endblock %}


Paso 15: Eliminar Usuario 
*************************

- Para eliminar un usuario vamos a añadir un nuevo botón en el template **profile.html.twig**:

.. code-block:: html 

    {% extends 'base.html.twig' %}

    {% block title %}Perfil de usuario{% endblock %}

    {% block body %}

    <div class="alert-group alert {{alert['status']}} alert-dismissible fade {{alert['show']}}" role="alert">
        {{alert['message']}}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>

    <div class="container mt-4 text-center">
                <h3>Datos de usuario</h3>
                <hr />
                <!-- la imagen vamos a cargarla desde controlador -->
                <img src="{{avatar}}" class="avatarEdit rounded img-thumbnail img-fluid"  alt="Avatar" />
                <!-- No olvides poner que el formulario es tipo multipart -->
                <form id="userEditForm" action="" method="post" role="form" enctype='multipart/form-data'>
                    {{ form_row(user_edit_form._token) }}
                    <div class="row">
                        <div class="col-md-12 mt-3">
                            {{ form_label(user_edit_form.avatar, 'avatar', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(user_edit_form.avatar, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder': 'Avatar'}}) }}
                            {{ form_errors(user_edit_form.avatar) }}
                        </div>
                        <div class="col-md-12 mt-3">
                            {{ form_label(user_edit_form.name, 'name', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(user_edit_form.name, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder': 'Nombre'}}) }}
                            {{ form_errors(user_edit_form.name) }}
                        </div>
                        <div class="col-md-12 mt-3">
                            {{ form_label(user_edit_form.lastname, 'lastname', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(user_edit_form.lastname, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder': 'Apellidos'}}) }}
                            {{ form_errors(user_edit_form.lastname) }}
                        </div>
                        <div class="col-md-12 mt-3">
                            {{ form_label(user_edit_form.email, 'email', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(user_edit_form.email, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder': 'Email'}}) }}
                            {{ form_errors(user_edit_form.email) }}
                        </div>
                        <div class="col-md-12 mt-3">
                            {{ form_label(user_edit_form.password, 'password', {'label_attr': {'style': 'display:none'}}) }}
                            {{ form_widget(user_edit_form.password, {'attr': {'class': 'col me-2 form-control form-sm', 'placeholder': 'Contraseña (dejar en blanco para no cambiar)'}}) }}
                            {{ form_errors(user_edit_form.password) }}
                        </div>
                        <div class="col-md-12 mt-3">            
                            <input type="submit" class="btn btn-success form-control mt-3" value="Actualizar datos" />
                        </div>
                        <div class="col-md-12 mt-3">
                            <a href="{{path('logout')}}">Cerrar sesión</a>
                        </div>
                        <!-- creamos un nuevo botón para eliminar el usuario: -->
                        <div class="col-md-12 mt-3">
                            <button type="button" class="cursor cursor-delete me-2 mb-1" data-bs-toggle="modal" data-bs-target="#deleteUserModal">Dar de baja usuario</button>
                        </div>
                    </div>
                </form>
    </div>

    <!-- cargamos el modal aquí abajo: -->
    <div class="modal fade" id="deleteUserModal" tabIndex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
            <div class="modal-header">
                <h5 className="modal-title" id="exampleModalLabel">Cerrar cuenta</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Se va a eliminar su cuenta de usuario junto a todas sus tareas</p>
                <p>Esta operación no tiene retorno, ¿proceder?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <!-- añadir función al botón: -->
                <a href="{{path('delete_user')}}" class="btn btn-danger">Aceptar</a>
            </div>
            </div>
        </div>
    </div>

    {% endblock %}


- Añadimos el estilo nuevo del botón al final de **base.css**:

.. code-block:: css 

    .cursor{
        border: 0px;
        background: transparent;
    }
        .cursor-delete{
            color: red;
        }

- Creamos el método para eliminar al usuario en **UserController.php**:

.. code-block:: php 

    <?php

    namespace App\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\Routing\Annotation\Route;
    use Symfony\Component\HttpFoundation\Request;
    use Doctrine\ORM\EntityManagerInterface;
    use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
    use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
    use Symfony\Component\String\Slugger\SluggerInterface;
    use Symfony\Component\HttpFoundation\File\Exception\FileException;
    use Symfony\Component\HttpFoundation\File\UploadedFile;
    use Symfony\Component\Mailer\MailerInterface;
    use Symfony\Component\Mime\Email;
    // cargamos las siguientes librerías para poder cerrar sesión antes de borrar usuario:
    use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;

    use App\Entity\User;
    use App\Form\UserType;
    use App\Form\ResetType;

    class UserController extends AbstractController
    {   
        public function login(AuthenticationUtils $authenticationUtils, Request $request): Response 
        {   
            $error = $authenticationUtils->getLastAuthenticationError();
            $lastUsername = "";

            $alert = array(
                'show' => $request->query->get("show") ? $request->query->get("show") : '',
                'status' => $request->query->get("status") ? $request->query->get("status") : '',
                'message' => $request->query->get("message") ? $request->query->get("message") : ''
            );

            if($error){
                $alert = array(
                    'show' => 'show',
                    'status' => 'alert-warning',
                    'message' => 'Error de autentiación, usuario o contraseñas incorrectos'
                );
            }

            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 
            
            return $this->render('user/login.html.twig', [
                'registration_form' => $registrationForm->createView(),
                'last_username' => $lastUsername, 
                'error' => $error,
                'alert' => $alert 
            ]);
        }

        public function logout(): void {}
        
        public function register(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher): Response
        {   
            $user = new User();
            $registrationForm = $this->createForm(UserType::class, $user); 

            $registrationForm->handleRequest($request);
            if($registrationForm->isSubmitted()){
                $email = $registrationForm->get('email')->getData();
                $emailExists = $doctrine->getRepository(User::class)->findOneBy(['email' => $email]);
                if($emailExists){
                    $alert = array(
                        'show' => 'show',
                        'status' => 'alert-danger',
                        'message' => 'El email ya se encuentra registrado.'
                    );
                    return $this->redirectToRoute('login', $alert);
                }

                if($registrationForm->isValid()){
                    $user->setRoles(['ROLE_USER']);
                    $plainPassword = $registrationForm->get('password')->getData();
                    $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                    $user->setPassword($hashedPassword);

                    $doctrine->persist($user);
                    $doctrine->flush();
                    $alert = array(
                        'show' => 'show',
                        'status' => 'alert-success',
                        'message' => 'Usuario registrado con éxito. Ya puede iniciar sesión.'
                    );
                    return $this->redirectToRoute('login', $alert);
                }
            }
        }

        public function profile(
            Request $request, 
            EntityManagerInterface $doctrine, 
            UserPasswordHasherInterface $passwordHasher,
            SluggerInterface $slugger 
        ): Response
        {
            $user = $this->getUser();
            $isAvatar = $user->getAvatar();
            $username = $user->getName();

            $alert = array(
                'show' => $request->query->get("show") ? $request->query->get("show") : '',
                'status' => $request->query->get("status") ? $request->query->get("status") : '',
                'message' => $request->query->get("message") ? $request->query->get("message") : ''
            );

            if($isAvatar){
                $avatar = './uploads/avatars/' . $user->getAvatar();
            }else{
                $avatar = './assets/images/avatar.png';
            }

            $oldPassword = $user->getPassword();
            $userEditForm = $this->createForm(UserType::class, $user); 
            
            $userEditForm->handleRequest($request);
            
            if($userEditForm->isSubmitted()){
                if($userEditForm->isValid()){
                    $file = $userEditForm->get('avatar')->getData();
                    if($file){
                        $originalFilename = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME);
                        $safeFilename = $slugger->slug($originalFilename);
                        $newFilename = $safeFilename . '-' . uniqid() . '.' . $file->guessExtension();
                        try{
                            $file->move(
                                $this->getParameter('avatars'), 
                                $newFilename
                            );
                        }catch(FileException $e){
                            // ignoramos el error y seguimos adelante
                        }

                        $user->setAvatar($newFilename);
                    }else{ 
                        $user->setAvatar($isAvatar);
                    }

                    $plainPassword = $userEditForm->get('password')->getData();
                    if($plainPassword){
                        $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                        $user->setPassword($hashedPassword);
                    }else{
                        $user->setPassword($oldPassword);
                    }

                    $doctrine->flush();

                    $alert = array(
                        'show' => 'show',
                        'status' => 'alert-success',
                        'message' => 'Usuario actualizado con éxito.'
                    );

                    return $this->redirectToRoute('profile', $alert);
                }
            }

            return $this->render('user/profile.html.twig', [
                'user_edit_form' => $userEditForm->createView(),
                'avatar' => $avatar, 
                'username' => $username,
                'alert' => $alert
            ]);
        }

        public function send_reset_email(
            Request $request, 
            EntityManagerInterface $doctrine, 
            MailerInterface $mailer){
            $email = $request->get('reset_email');
            $user = $doctrine->getRepository(User::class)->findOneBy(['email' => $email]);
            
            if($user){
                $prefix = hash('sha256', $_ENV['START_KEY']);
                $sufix = substr(hash('sha256', $_ENV['END_KEY']), 0, 16);
                $hashId = openssl_encrypt($user->getId(), $_ENV['HASH_METHOD'], $prefix, 0, $sufix);

                $urlSource = "http://localhost:5000/reset_password/" . base64_encode($hashId);
                echo var_dump($urlSource);

                $emailToSend = (new Email())
                                ->from('pytonicus@gmail.com')
                                ->to($email)
                                ->subject('ASUNTO: Recuperar contraseña')
                                ->text('reestablecer contraseña')
                                ->html('<a href="' . $urlSource . '">' . $urlSource . '</a>');
                $mailer->send($emailToSend);

                
                $alert = array(
                    'show' => 'show',
                    'status' => 'alert-success',
                    'message' => 'Se ha enviado un email con un enlace para restablecer contraseña.'
                );
                
            }else{
                $alert = array(
                    'show' => 'show',
                    'status' => 'alert-warning',
                    'message' => 'El email no se encuentra registrado en el sistema.'
                );
            }

            return $this->redirectToRoute('login', $alert);
            /* Este código lo usamos para depurar el correo:
            return new Response(
                '<html><body>TESTING DE EMAIL</body></html>'
            ); */
        }

        public function reset_password(
            $hashId,
            Request $request,
            EntityManagerInterface $doctrine,
            UserPasswordHasherInterface $passwordHasher
            )
        {
            $prefix = hash('sha256', $_ENV['START_KEY']);
            $sufix = substr(hash('sha256', $_ENV['END_KEY']), 0, 16);
            $id = openssl_decrypt(base64_decode($hashId), $_ENV['HASH_METHOD'], $prefix, 0, $sufix);
            
            $user = $doctrine->getRepository(User::class)->findOneBy(['id' => $id]);
            if($user){
                $newPasswordForm = $this->createForm(ResetType::class); 
                $newPasswordForm->handleRequest($request);
            
                if($newPasswordForm->isSubmitted()){
                    if($newPasswordForm->isValid()){               
                        $plainPassword = $newPasswordForm['password']['first'];
                        if($plainPassword){
                            $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword->getData());
                            $user->setPassword($hashedPassword);
                        }else{
                            $user->setPassword($oldPassword);
                        }
                        $doctrine->flush();
                        $alert = array(
                            'show' => 'show',
                            'status' => 'alert-success',
                            'message' => 'La contraseña ha sido reestablecida con éxito, ya puede iniciar sesión.'
                        );
                        return $this->redirectToRoute('login', $alert);
                    }
                }
            }else{
                $alert = array(
                    'show' => 'show',
                    'status' => 'alert-danger',
                    'message' => 'Ha habido un error al reestablecer la contraseña, por favor inténtelo de nuevo.'
                );
                return $this->redirectToRoute('login', $alert); 
            }

            return $this->render('user/reset_password.html.twig', [
                'new_password_form' => $newPasswordForm->createView(),
            ]);
        }

        // creamos el método para eliminar el usuario y para cerrar sesión:
        public function delete_user(
            EntityManagerInterface $doctrine,
            TokenStorageInterface $tokenStorage): Response
        {
            // recuperamos el usuario que esta en sesión:
            $user = $this->getUser();
            
            if($user){
                // cerramos la sesión vaciando el token:
                $tokenStorage->setToken();

                // borramos al usuario si realmente existe:
                $doctrine->remove($user);
                $doctrine->flush(); 
            }
            // notificamos que ha sido dado de baja en login:
            $alert = array(
                'show' => 'show',
                'status' => 'alert-danger',
                'message' => 'Su usuario ha sido dado de baja. Ya no podrá iniciar sesión con el'
            );
            return $this->redirectToRoute('login', $alert); 

        }
    }


- Asignamos la ruta nueva para eliminar usuario en **routes.yaml**:

.. code-block:: yaml 

    index:
        path: /
        controller: App\Controller\TaskController::index

    finish:
        path: /tasks/finish/{id}
        controller: App\Controller\TaskController::finish

    delete:
        path: /tasks/delete/{id}
        controller: App\Controller\TaskController::delete

    update:
        path: /tasks/update/{id}
        controller: App\Controller\TaskController::update

    login: 
        path: /login
        controller: App\Controller\UserController::login

    logout:
        path: /logout
        controller: App\Controller\UserController::logout

    register: 
        path: /register
        controller: App\Controller\UserController::register

    profile:
        path: /profile
        controller: App\Controller\UserController::profile

    send_reset_email:
        path: /send_reset_email
        controller: App\Controller\UserController::send_reset_email

    reset_password:
        path: /reset_password/{hashId}
        controller: App\Controller\UserController::reset_password

    # ruta para eliminar usuario:
    delete_user:
        path: /delete_user
        controller: App\Controller\UserController::delete_user


Paso 16: Subir cambios a GitHub  
*******************************

- Parar ejecución de app.
- Añadir cambios: ``git add .``
- Realizar un commit: ``git commit -am "Phase 2 complete"``
- Subir cambios a Github con el nombre de la rama actual: ``git push origin feature/phase-2-user-authentication``
- Desde gitHub presionar botón **Compare & pull request**.
- cambiar rama base **master** por **developer** y pulsar **Create pull request**
- Pulsar en **Merge pull request** y a continuación en **Confirm merge**.
- Una vez terminado volvemos a local y cambiamos de rama a developer: ``git checkout developer``
- Actualizamos rama developer: ``git pull origin developer`` 

Y con esto concluye la segunda fase del proyecto.

.. raw:: html 

    <hr><br>